// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package main

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// MainMetaData contains all meta data concerning the Main contract.
var MainMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"AmountExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BatchTimeoutExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EthTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFromIdx\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"elementType\",\"type\":\"string\"}],\"name\":\"InvalidPoseidonAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToIdx\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVerifierAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LoadAmountDoesNotMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LoadAmountExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SmtProofInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawAlreadyDone\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"batchNum\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"l1UserTxsLen\",\"type\":\"uint16\"}],\"name\":\"ForgeBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"forgeL1BatchTimeout\",\"type\":\"uint8\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"queueIndex\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"position\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"l1UserTx\",\"type\":\"bytes\"}],\"name\":\"L1UserTxEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint48\",\"name\":\"idx\",\"type\":\"uint48\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"numExitRoot\",\"type\":\"uint32\"}],\"name\":\"WithdrawEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ABSOLUTE_MAX_BATCHTIMEOUT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethAddress\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"fromIdx\",\"type\":\"uint48\"},{\"internalType\":\"uint40\",\"name\":\"loadAmountF\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"amountF\",\"type\":\"uint40\"},{\"internalType\":\"uint48\",\"name\":\"toIdx\",\"type\":\"uint48\"}],\"name\":\"_addTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"_hashFinalNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"}],\"name\":\"_hashNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"accountRootMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"loadAmountF\",\"type\":\"uint40\"}],\"name\":\"createAccountDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentFillingBatch\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"fromIdx\",\"type\":\"uint48\"},{\"internalType\":\"uint40\",\"name\":\"loadAmountF\",\"type\":\"uint40\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"fromIdx\",\"type\":\"uint48\"},{\"internalType\":\"uint40\",\"name\":\"amountF\",\"type\":\"uint40\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"name\":\"exitNullifierMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"exitRootMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"fromIdx\",\"type\":\"uint48\"},{\"internalType\":\"uint48[]\",\"name\":\"toIdxs\",\"type\":\"uint48[]\"}],\"name\":\"explodeMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"newLastIdx\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"newAccountRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newVouchRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newScoreRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newExitRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"proofA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"proofB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"proofC\",\"type\":\"uint256[2]\"}],\"name\":\"forgeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"queueIndex\",\"type\":\"uint32\"}],\"name\":\"getL1TransactionQueue\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastForgedBatch\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQueueLength\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"batchNum\",\"type\":\"uint32\"}],\"name\":\"getStateRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_forgeBatchTimeout\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_poseidon2Elements\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poseidon3Elements\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poseidon4Elements\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastForgedBatch\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastIdx\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupVerifier\",\"outputs\":[{\"internalType\":\"contractVerifierRollupInterface\",\"name\":\"verifierInterface\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nLevel\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"scoreRootMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newTimeout\",\"type\":\"uint8\"}],\"name\":\"setForgeL1BatchTimeout\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"unprocessedBatchesMap\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"fromIdx\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"toIdx\",\"type\":\"uint48\"}],\"name\":\"unvouch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"fromIdx\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"toIdx\",\"type\":\"uint48\"}],\"name\":\"vouch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"vouchRootMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"amount\",\"type\":\"uint192\"},{\"internalType\":\"uint32\",\"name\":\"numExitRoot\",\"type\":\"uint32\"},{\"internalType\":\"uint256[]\",\"name\":\"siblings\",\"type\":\"uint256[]\"},{\"internalType\":\"uint48\",\"name\":\"idx\",\"type\":\"uint48\"}],\"name\":\"withdrawMerkleProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f80fd5b5061401c8061001d5f395ff3fe6080604052600436106101d7575f3560e01c8063b1f073d411610101578063c25d578911610094578063ef8140b511610063578063ef8140b5146106a7578063f2fde38b146106e3578063f84f92ee1461070b578063fbb4a00f14610747576101d7565b8063c25d5789146105ff578063d486645c14610629578063e8bf92ed14610653578063ed54b2f41461067f576101d7565b8063bd8a4a61116100d0578063bd8a4a6114610537578063c021501b14610573578063c0b55ae41461059b578063c1b190c0146105d7576101d7565b8063b1f073d41461046d578063b8f7700514610495578063ba2506df146104bf578063bbe5a375146104fb576101d7565b8063715018a6116101795780638da5cb5b116101485780638da5cb5b146103a157806392d5df97146103cb578063a5e2ec5b146103f5578063adacd33b14610431576101d7565b8063715018a6146102ff578063795c6167146103155780638195b79014610351578063894bc2b814610379576101d7565b80632f463f59116101b55780632f463f59146102495780633009c59f1461027157806344e0b2ce146102ad57806362332ee2146102d7576101d7565b806311954d3c146101db5780631b78164b14610203578063212bafd71461022d575b5f80fd5b3480156101e6575f80fd5b5061020160048036038101906101fc91906127a3565b610763565b005b34801561020e575f80fd5b50610217610869565b60405161022491906127ff565b60405180910390f35b61024760048036038101906102429190612852565b610882565b005b348015610254575f80fd5b5061026f600480360381019061026a91906128ea565b61099d565b005b34801561027c575f80fd5b506102976004803603810190610292919061298b565b610b4e565b6040516102a491906129ce565b60405180910390f35b3480156102b8575f80fd5b506102c1610b74565b6040516102ce91906127ff565b60405180910390f35b3480156102e2575f80fd5b506102fd60048036038101906102f89190612a95565b610b8a565b005b34801561030a575f80fd5b50610313610d31565b005b348015610320575f80fd5b5061033b6004803603810190610336919061298b565b610d44565b60405161034891906129ce565b60405180910390f35b34801561035c575f80fd5b5061037760048036038101906103729190612852565b610d59565b005b348015610384575f80fd5b5061039f600480360381019061039a9190612c61565b610e3c565b005b3480156103ac575f80fd5b506103b5610fc2565b6040516103c29190612cca565b60405180910390f35b3480156103d6575f80fd5b506103df610ff7565b6040516103ec9190612cfe565b60405180910390f35b348015610400575f80fd5b5061041b6004803603810190610416919061298b565b610ffc565b60405161042891906129ce565b60405180910390f35b34801561043c575f80fd5b506104576004803603810190610452919061298b565b611011565b60405161046491906129ce565b60405180910390f35b348015610478575f80fd5b50610493600480360381019061048e9190612d83565b611026565b005b3480156104a0575f80fd5b506104a96112b8565b6040516104b691906127ff565b60405180910390f35b3480156104ca575f80fd5b506104e560048036038101906104e0919061298b565b6112ed565b6040516104f29190612eaf565b60405180910390f35b348015610506575f80fd5b50610521600480360381019061051c9190612ecf565b61139a565b60405161052e91906129ce565b60405180910390f35b348015610542575f80fd5b5061055d6004803603810190610558919061298b565b61140f565b60405161056a91906129ce565b60405180910390f35b34801561057e575f80fd5b5061059960048036038101906105949190612f37565b611424565b005b3480156105a6575f80fd5b506105c160048036038101906105bc9190612ecf565b611468565b6040516105ce91906129ce565b60405180910390f35b3480156105e2575f80fd5b506105fd60048036038101906105f891906127a3565b6114be565b005b34801561060a575f80fd5b506106136115c3565b60405161062091906127ff565b60405180910390f35b348015610634575f80fd5b5061063d6115d8565b60405161064a9190612f71565b60405180910390f35b34801561065e575f80fd5b506106676115f0565b60405161067693929190612fe5565b60405180910390f35b34801561068a575f80fd5b506106a560048036038101906106a0919061301a565b611626565b005b3480156106b2575f80fd5b506106cd60048036038101906106c8919061298b565b611838565b6040516106da9190612eaf565b60405180910390f35b3480156106ee575f80fd5b50610709600480360381019061070491906130b7565b6118d3565b005b348015610716575f80fd5b50610731600480360381019061072c91906130e2565b611957565b60405161073e919061313a565b60405180910390f35b610761600480360381019061075c9190613153565b611981565b005b60ff65ffffffffffff168265ffffffffffff161115806107a65750600260149054906101000a900465ffffffffffff1665ffffffffffff168265ffffffffffff16115b156107dd576040517f618d793500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff65ffffffffffff168165ffffffffffff161115806108205750600260149054906101000a900465ffffffffffff1665ffffffffffff168165ffffffffffff16115b15610857576040517fe9eabe2f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61086533835f60018561099d565b5050565b5f6002601a9054906101000a900463ffffffff16905090565b5f61088c82611a21565b905070010000000000000000000000000000000081106108d8576040517fb3a4a38000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b348114610911576040517fb9caa86200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff65ffffffffffff168365ffffffffffff161115806109545750600260149054906101000a900465ffffffffffff1665ffffffffffff168365ffffffffffff16115b1561098b576040517f618d793500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109983384845f8061099d565b505050565b5f85858585856040516020016109b795949392919061322b565b60405160208183030381529060405290505f608060085f60035f9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020015f208054610a04906132b6565b9050610a109190613340565b905060085f60035f9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020015f2082604051602001610a5292919061343c565b60405160208183030381529060405260085f60035f9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020015f209081610a9b91906135e1565b508060ff1660035f9054906101000a900463ffffffff1663ffffffff167fdd5c7c5ea02d3c5d1621513faa6de53d474ee6f111eda6352a63e3dfe8c4011984604051610ae79190612eaf565b60405180910390a36103e8600182610aff91906136b0565b10610b455760035f81819054906101000a900463ffffffff1680929190610b25906136e3565b91906101000a81548163ffffffff021916908363ffffffff160217905550505b50505050505050565b5f60045f8363ffffffff1663ffffffff1681526020019081526020015f20549050919050565b6002601a9054906101000a900463ffffffff1681565b5f610b958633611a41565b90505f610ba182611b02565b90505f60075f8863ffffffff1663ffffffff1681526020019081526020015f2054905060095f8863ffffffff1663ffffffff1681526020019081526020015f205f8565ffffffffffff1665ffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615610c44576040517f14f640f800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c598187878765ffffffffffff1686611ba3565b610c8e576040517efc0aaa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160095f8963ffffffff1663ffffffff1681526020019081526020015f205f8665ffffffffffff1665ffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550610ceb88611c3e565b8663ffffffff168465ffffffffffff167f102db758451b2f65238246a452d00c0c4c8f59d8c623aff254111079418e57ec60405160405180910390a35050505050505050565b610d39611c64565b610d425f611ceb565b565b6004602052805f5260405f205f915090505481565b5f610d6382611a21565b90507001000000000000000000000000000000008110610daf576040517fb95eb50800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff65ffffffffffff168365ffffffffffff16111580610df25750600260149054906101000a900465ffffffffffff1665ffffffffffff168365ffffffffffff16115b15610e29576040517f618d793500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e3733845f85600161099d565b505050565b60ff65ffffffffffff168265ffffffffffff16111580610e7f5750600260149054906101000a900465ffffffffffff1665ffffffffffff168265ffffffffffff16115b15610eb6576040517f618d793500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f815190505f5b81811015610f7e5760ff65ffffffffffff16838281518110610ee257610ee161370e565b5b602002602001015165ffffffffffff16111580610f3c5750600260149054906101000a900465ffffffffffff1665ffffffffffff16838281518110610f2a57610f2961370e565b5b602002602001015165ffffffffffff16115b15610f73576040517fe9eabe2f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806001019050610ebd565b505f5b81811015610fbc57610fb133855f6002878681518110610fa457610fa361370e565b5b602002602001015161099d565b806001019050610f81565b50505050565b5f80610fcc611dbc565b9050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b60f081565b6007602052805f5260405f205f915090505481565b6005602052805f5260405f205f915090505481565b5f6110348989898989611de3565b9050600a5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166343753b4d8585856040518060200160405280878152506040518563ffffffff1660e01b81526004016110a694939291906138b1565b602060405180830381865afa1580156110c1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110e59190613920565b61111b576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002601a81819054906101000a900463ffffffff168092919061113d906136e3565b91906101000a81548163ffffffff021916908363ffffffff1602179055505088600260146101000a81548165ffffffffffff021916908365ffffffffffff1602179055508760045f6002601a9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020015f20819055508660055f6002601a9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020015f20819055508560065f6002601a9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020015f20819055508460075f6002601a9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020015f20819055505f61125a612023565b90506002601a9054906101000a900463ffffffff1663ffffffff167fe00040c8a3b0bf905636c26924e90520eafc5003324138236fddee2d34588618826040516112a49190613967565b60405180910390a250505050505050505050565b5f6002601a9054906101000a900463ffffffff1660035f9054906101000a900463ffffffff166112e89190613980565b905090565b606060085f8363ffffffff1663ffffffff1681526020019081526020015f208054611317906132b6565b80601f0160208091040260200160405190810160405280929190818152602001828054611343906132b6565b801561138e5780601f106113655761010080835404028352916020019161138e565b820191905f5260205f20905b81548152906001019060200180831161137157829003601f168201915b50505050509050919050565b5f6113a3612699565b83815f600381106113b7576113b661370e565b5b60200201818152505082816001600381106113d5576113d461370e565b5b6020020181815250506001816002600381106113f4576113f361370e565b5b60200201818152505061140681612133565b91505092915050565b6006602052805f5260405f205f915090505481565b60f060ff168160ff161115611465576040517fc043ba9500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b5f6114716126bb565b83815f600281106114855761148461370e565b5b60200201818152505082816001600281106114a3576114a261370e565b5b6020020181815250506114b5816121d4565b91505092915050565b60ff65ffffffffffff168265ffffffffffff161115806115015750600260149054906101000a900465ffffffffffff1665ffffffffffff168265ffffffffffff16115b15611538576040517f618d793500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff65ffffffffffff168165ffffffffffff1611158061157b5750600260149054906101000a900465ffffffffffff1665ffffffffffff168165ffffffffffff16115b156115b2576040517fe9eabe2f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6115bf33835f808561099d565b5050565b60035f9054906101000a900463ffffffff1681565b600260149054906101000a900465ffffffffffff1681565b600a805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b5f61162f612274565b90505f815f0160089054906101000a900460ff161590505f825f015f9054906101000a900467ffffffffffffffff1690505f808267ffffffffffffffff161480156116775750825b90505f60018367ffffffffffffffff161480156116aa57505f3073ffffffffffffffffffffffffffffffffffffffff163b145b9050811580156116b8575080155b156116ef576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001855f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550831561173c576001855f0160086101000a81548160ff0219169083151502179055505b60ff600260146101000a81548165ffffffffffff021916908365ffffffffffff160217905550600160035f6101000a81548163ffffffff021916908363ffffffff16021790555061178e8c8c8c61229b565b611799888888612393565b7fd2b214d5e2d2f958eb3b30690fa010715ebfdb9438837a496031fd1d0462e593896040516117c89190612cfe565b60405180910390a1831561182a575f855f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516118219190613a03565b60405180910390a15b505050505050505050505050565b6008602052805f5260405f205f915090508054611854906132b6565b80601f0160208091040260200160405190810160405280929190818152602001828054611880906132b6565b80156118cb5780601f106118a2576101008083540402835291602001916118cb565b820191905f5260205f20905b8154815290600101906020018083116118ae57829003601f168201915b505050505081565b6118db611c64565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361194b575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016119429190612cca565b60405180910390fd5b61195481611ceb565b50565b6009602052815f5260405f20602052805f5260405f205f915091509054906101000a900460ff1681565b5f61198b82611a21565b905070010000000000000000000000000000000081106119d7576040517fb3a4a38000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b348114611a10576040517fb9caa86200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611a1d335f845f8061099d565b5050565b5f6402540be4008264ffffffffff16611a3a9190613a1c565b9050919050565b611a496126dd565b611a516126dd565b8377ffffffffffffffffffffffffffffffffffffffffffffffff16815f60048110611a7f57611a7e61370e565b5b6020020181815250508273ffffffffffffffffffffffffffffffffffffffff1681600160048110611ab357611ab261370e565b5b6020020181815250505f81600260048110611ad157611ad061370e565b5b6020020181815250505f81600360048110611aef57611aee61370e565b5b6020020181815250508091505092915050565b5f60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663248f6677836040518263ffffffff1660e01b8152600401611b5d9190613adc565b602060405180830381865afa158015611b78573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b9c9190613b09565b9050919050565b5f80611baf848461139a565b90505f80600188889050611bc39190613b3d565b90505b5f8112611c2d57878782818110611be057611bdf61370e565b5b9050602002013591505f6001808389901c1660ff1614905080611c0c57611c078484611468565b611c17565b611c168385611468565b5b9350508080611c2590613b7d565b915050611bc6565b508188149250505095945050505050565b611c618177ffffffffffffffffffffffffffffffffffffffffffffffff166125a1565b50565b611c6c612692565b73ffffffffffffffffffffffffffffffffffffffff16611c8a610fc2565b73ffffffffffffffffffffffffffffffffffffffff1614611ce957611cad612692565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611ce09190612cca565b60405180910390fd5b565b5f611cf4611dbc565b90505f815f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082825f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b5f7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b5f8060045f6002601a9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020015f205490505f60055f6002601a9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020015f205490505f60065f6002601a9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020015f205490505f600260149054906101000a900465ffffffffffff1665ffffffffffff1690505f60085f60016002601a9054906101000a900463ffffffff16611ec09190613bc4565b63ffffffff1663ffffffff1681526020019081526020015f208054611ee4906132b6565b80601f0160208091040260200160405190810160405280929190818152602001828054611f10906132b6565b8015611f5b5780601f10611f3257610100808354040283529160200191611f5b565b820191905f5260205f20905b815481529060010190602001808311611f3e57829003601f168201915b505050505090505f828686868f8f8f8f8f8a604051602001611f869a99989796959493929190613c1b565b60405160208183030381529060405290507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001600282604051611fc89190613cca565b602060405180830381855afa158015611fe3573d5f803e3d5ffd5b5050506040513d601f19601f820116820180604052508101906120069190613d13565b5f1c6120129190613d3e565b965050505050505095945050505050565b5f80608060085f6002601a9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020015f208054612061906132b6565b905061206d9190613340565b905060085f6002601a9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020015f205f6120a991906126ff565b60035f9054906101000a900463ffffffff1663ffffffff1660016002601a9054906101000a900463ffffffff166120e09190613bc4565b63ffffffff160361212c5760035f81819054906101000a900463ffffffff168092919061210c906136e3565b91906101000a81548163ffffffff021916908363ffffffff160217905550505b8091505090565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166325cc70e8836040518263ffffffff1660e01b815260040161218e9190613ded565b602060405180830381865afa1580156121a9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121cd9190613b09565b9050919050565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166329a5f2f6836040518263ffffffff1660e01b815260040161222e9190613e85565b602060405180830381865afa158015612249573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061226d9190613b09565b9050919050565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612300576040517f10c40e8c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180606001604052808473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815250600a5f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155905050505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612401576040517f30a7c7ea0000000000000000000000000000000000000000000000000000000081526004016123f890613ef8565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361246f576040517f30a7c7ea00000000000000000000000000000000000000000000000000000000815260040161246690613f60565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036124dd576040517f30a7c7ea0000000000000000000000000000000000000000000000000000000081526004016124d490613fc8565b60405180910390fd5b825f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b5f3373ffffffffffffffffffffffffffffffffffffffff16825f67ffffffffffffffff8111156125d4576125d3612b29565b5b6040519080825280601f01601f1916602001820160405280156126065781602001600182028036833780820191505090505b506040516126149190613cca565b5f6040518083038185875af1925050503d805f811461264e576040519150601f19603f3d011682016040523d82523d5f602084013e612653565b606091505b505090508061268e576040517f6d963f8800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b5f33905090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b50805461270b906132b6565b5f825580601f1061271c5750612739565b601f0160209004905f5260205f2090810190612738919061273c565b5b50565b5b80821115612753575f815f90555060010161273d565b5090565b5f604051905090565b5f80fd5b5f80fd5b5f65ffffffffffff82169050919050565b61278281612768565b811461278c575f80fd5b50565b5f8135905061279d81612779565b92915050565b5f80604083850312156127b9576127b8612760565b5b5f6127c68582860161278f565b92505060206127d78582860161278f565b9150509250929050565b5f63ffffffff82169050919050565b6127f9816127e1565b82525050565b5f6020820190506128125f8301846127f0565b92915050565b5f64ffffffffff82169050919050565b61283181612818565b811461283b575f80fd5b50565b5f8135905061284c81612828565b92915050565b5f806040838503121561286857612867612760565b5b5f6128758582860161278f565b92505060206128868582860161283e565b9150509250929050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6128b982612890565b9050919050565b6128c9816128af565b81146128d3575f80fd5b50565b5f813590506128e4816128c0565b92915050565b5f805f805f60a0868803121561290357612902612760565b5b5f612910888289016128d6565b95505060206129218882890161278f565b94505060406129328882890161283e565b93505060606129438882890161283e565b92505060806129548882890161278f565b9150509295509295909350565b61296a816127e1565b8114612974575f80fd5b50565b5f8135905061298581612961565b92915050565b5f602082840312156129a05761299f612760565b5b5f6129ad84828501612977565b91505092915050565b5f819050919050565b6129c8816129b6565b82525050565b5f6020820190506129e15f8301846129bf565b92915050565b5f77ffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b612a13816129e7565b8114612a1d575f80fd5b50565b5f81359050612a2e81612a0a565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f840112612a5557612a54612a34565b5b8235905067ffffffffffffffff811115612a7257612a71612a38565b5b602083019150836020820283011115612a8e57612a8d612a3c565b5b9250929050565b5f805f805f60808688031215612aae57612aad612760565b5b5f612abb88828901612a20565b9550506020612acc88828901612977565b945050604086013567ffffffffffffffff811115612aed57612aec612764565b5b612af988828901612a40565b93509350506060612b0c8882890161278f565b9150509295509295909350565b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b612b5f82612b19565b810181811067ffffffffffffffff82111715612b7e57612b7d612b29565b5b80604052505050565b5f612b90612757565b9050612b9c8282612b56565b919050565b5f67ffffffffffffffff821115612bbb57612bba612b29565b5b602082029050602081019050919050565b5f612bde612bd984612ba1565b612b87565b90508083825260208201905060208402830185811115612c0157612c00612a3c565b5b835b81811015612c2a5780612c16888261278f565b845260208401935050602081019050612c03565b5050509392505050565b5f82601f830112612c4857612c47612a34565b5b8135612c58848260208601612bcc565b91505092915050565b5f8060408385031215612c7757612c76612760565b5b5f612c848582860161278f565b925050602083013567ffffffffffffffff811115612ca557612ca4612764565b5b612cb185828601612c34565b9150509250929050565b612cc4816128af565b82525050565b5f602082019050612cdd5f830184612cbb565b92915050565b5f60ff82169050919050565b612cf881612ce3565b82525050565b5f602082019050612d115f830184612cef565b92915050565b612d20816129b6565b8114612d2a575f80fd5b50565b5f81359050612d3b81612d17565b92915050565b5f81905082602060020282011115612d5c57612d5b612a3c565b5b92915050565b5f81905082604060020282011115612d7d57612d7c612a3c565b5b92915050565b5f805f805f805f806101a0898b031215612da057612d9f612760565b5b5f612dad8b828c0161278f565b9850506020612dbe8b828c01612d2d565b9750506040612dcf8b828c01612d2d565b9650506060612de08b828c01612d2d565b9550506080612df18b828c01612d2d565b94505060a0612e028b828c01612d41565b93505060e0612e138b828c01612d62565b925050610160612e258b828c01612d41565b9150509295985092959890939650565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015612e6c578082015181840152602081019050612e51565b5f8484015250505050565b5f612e8182612e35565b612e8b8185612e3f565b9350612e9b818560208601612e4f565b612ea481612b19565b840191505092915050565b5f6020820190508181035f830152612ec78184612e77565b905092915050565b5f8060408385031215612ee557612ee4612760565b5b5f612ef285828601612d2d565b9250506020612f0385828601612d2d565b9150509250929050565b612f1681612ce3565b8114612f20575f80fd5b50565b5f81359050612f3181612f0d565b92915050565b5f60208284031215612f4c57612f4b612760565b5b5f612f5984828501612f23565b91505092915050565b612f6b81612768565b82525050565b5f602082019050612f845f830184612f62565b92915050565b5f819050919050565b5f612fad612fa8612fa384612890565b612f8a565b612890565b9050919050565b5f612fbe82612f93565b9050919050565b5f612fcf82612fb4565b9050919050565b612fdf81612fc5565b82525050565b5f606082019050612ff85f830186612fd6565b61300560208301856129bf565b61301260408301846129bf565b949350505050565b5f805f805f805f60e0888a03121561303557613034612760565b5b5f6130428a828b016128d6565b97505060206130538a828b01612d2d565b96505060406130648a828b01612d2d565b95505060606130758a828b01612f23565b94505060806130868a828b016128d6565b93505060a06130978a828b016128d6565b92505060c06130a88a828b016128d6565b91505092959891949750929550565b5f602082840312156130cc576130cb612760565b5b5f6130d9848285016128d6565b91505092915050565b5f80604083850312156130f8576130f7612760565b5b5f61310585828601612977565b92505060206131168582860161278f565b9150509250929050565b5f8115159050919050565b61313481613120565b82525050565b5f60208201905061314d5f83018461312b565b92915050565b5f6020828403121561316857613167612760565b5b5f6131758482850161283e565b91505092915050565b5f8160601b9050919050565b5f6131948261317e565b9050919050565b5f6131a58261318a565b9050919050565b6131bd6131b8826128af565b61319b565b82525050565b5f8160d01b9050919050565b5f6131d9826131c3565b9050919050565b6131f16131ec82612768565b6131cf565b82525050565b5f8160d81b9050919050565b5f61320d826131f7565b9050919050565b61322561322082612818565b613203565b82525050565b5f61323682886131ac565b60148201915061324682876131e0565b6006820191506132568286613214565b6005820191506132668285613214565b60058201915061327682846131e0565b6006820191508190509695505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806132cd57607f821691505b6020821081036132e0576132df613289565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61334a826129b6565b9150613355836129b6565b925082613365576133646132e6565b5b828204905092915050565b5f81905092915050565b5f819050815f5260205f209050919050565b5f8154613398816132b6565b6133a28186613370565b9450600182165f81146133bc57600181146133d157613403565b60ff1983168652811515820286019350613403565b6133da8561337a565b5f5b838110156133fb578154818901526001820191506020810190506133dc565b838801955050505b50505092915050565b5f61341682612e35565b6134208185613370565b9350613430818560208601612e4f565b80840191505092915050565b5f613447828561338c565b9150613453828461340c565b91508190509392505050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026134a97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261346e565b6134b3868361346e565b95508019841693508086168417925050509392505050565b5f6134e56134e06134db846129b6565b612f8a565b6129b6565b9050919050565b5f819050919050565b6134fe836134cb565b61351261350a826134ec565b84845461347a565b825550505050565b5f90565b61352661351a565b6135318184846134f5565b505050565b5b81811015613554576135495f8261351e565b600181019050613537565b5050565b601f8211156135995761356a8161337a565b6135738461345f565b81016020851015613582578190505b61359661358e8561345f565b830182613536565b50505b505050565b5f82821c905092915050565b5f6135b95f198460080261359e565b1980831691505092915050565b5f6135d183836135aa565b9150826002028217905092915050565b6135ea82612e35565b67ffffffffffffffff81111561360357613602612b29565b5b61360d82546132b6565b613618828285613558565b5f60209050601f831160018114613649575f8415613637578287015190505b61364185826135c6565b8655506136a8565b601f1984166136578661337a565b5f5b8281101561367e57848901518255600182019150602085019450602081019050613659565b8683101561369b5784890151613697601f8916826135aa565b8355505b6001600288020188555050505b505050505050565b5f6136ba826129b6565b91506136c5836129b6565b92508282019050808211156136dd576136dc613313565b5b92915050565b5f6136ed826127e1565b915063ffffffff820361370357613702613313565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b82818337505050565b6137506040838361373b565b5050565b5f60029050919050565b5f81905092915050565b5f819050919050565b61377d6040838361373b565b5050565b5f61378c8383613771565b60408301905092915050565b5f82905092915050565b5f604082019050919050565b6137b781613754565b6137c1818461375e565b92506137cc82613768565b805f5b83811015613804576137e18284613798565b6137eb8782613781565b96506137f6836137a2565b9250506001810190506137cf565b505050505050565b5f60019050919050565b5f81905092915050565b5f819050919050565b613832816129b6565b82525050565b5f6138438383613829565b60208301905092915050565b5f602082019050919050565b6138648161380c565b61386e8184613816565b925061387982613820565b805f5b838110156138a95781516138908782613838565b965061389b8361384f565b92505060018101905061387c565b505050505050565b5f610120820190506138c55f830187613744565b6138d260408301866137ae565b6138df60c0830185613744565b6138ed61010083018461385b565b95945050505050565b6138ff81613120565b8114613909575f80fd5b50565b5f8151905061391a816138f6565b92915050565b5f6020828403121561393557613934612760565b5b5f6139428482850161390c565b91505092915050565b5f61ffff82169050919050565b6139618161394b565b82525050565b5f60208201905061397a5f830184613958565b92915050565b5f61398a826127e1565b9150613995836127e1565b9250828203905063ffffffff8111156139b1576139b0613313565b5b92915050565b5f819050919050565b5f67ffffffffffffffff82169050919050565b5f6139ed6139e86139e3846139b7565b612f8a565b6139c0565b9050919050565b6139fd816139d3565b82525050565b5f602082019050613a165f8301846139f4565b92915050565b5f613a26826129b6565b9150613a31836129b6565b9250828202613a3f816129b6565b91508282048414831517613a5657613a55613313565b5b5092915050565b5f60049050919050565b5f81905092915050565b5f819050919050565b5f602082019050919050565b613a8f81613a5d565b613a998184613a67565b9250613aa482613a71565b805f5b83811015613ad4578151613abb8782613838565b9650613ac683613a7a565b925050600181019050613aa7565b505050505050565b5f608082019050613aef5f830184613a86565b92915050565b5f81519050613b0381612d17565b92915050565b5f60208284031215613b1e57613b1d612760565b5b5f613b2b84828501613af5565b91505092915050565b5f819050919050565b5f613b4782613b34565b9150613b5283613b34565b925082820390508181125f8412168282135f851215161715613b7757613b76613313565b5b92915050565b5f613b8782613b34565b91507f80000000000000000000000000000000000000000000000000000000000000008203613bb957613bb8613313565b5b600182039050919050565b5f613bce826127e1565b9150613bd9836127e1565b9250828201905063ffffffff811115613bf557613bf4613313565b5b92915050565b5f819050919050565b613c15613c10826129b6565b613bfb565b82525050565b5f613c26828d613c04565b602082019150613c36828c613c04565b602082019150613c46828b613c04565b602082019150613c56828a613c04565b602082019150613c6682896131e0565b600682019150613c768288613c04565b602082019150613c868287613c04565b602082019150613c968286613c04565b602082019150613ca68285613c04565b602082019150613cb6828461340c565b91508190509b9a5050505050505050505050565b5f613cd5828461340c565b915081905092915050565b5f819050919050565b613cf281613ce0565b8114613cfc575f80fd5b50565b5f81519050613d0d81613ce9565b92915050565b5f60208284031215613d2857613d27612760565b5b5f613d3584828501613cff565b91505092915050565b5f613d48826129b6565b9150613d53836129b6565b925082613d6357613d626132e6565b5b828206905092915050565b5f60039050919050565b5f81905092915050565b5f819050919050565b5f602082019050919050565b613da081613d6e565b613daa8184613d78565b9250613db582613d82565b805f5b83811015613de5578151613dcc8782613838565b9650613dd783613d8b565b925050600181019050613db8565b505050505050565b5f606082019050613e005f830184613d97565b92915050565b5f60029050919050565b5f81905092915050565b5f819050919050565b5f602082019050919050565b613e3881613e06565b613e428184613e10565b9250613e4d82613e1a565b805f5b83811015613e7d578151613e648782613838565b9650613e6f83613e23565b925050600181019050613e50565b505050505050565b5f604082019050613e985f830184613e2f565b92915050565b5f82825260208201905092915050565b7f706f736569646f6e32456c656d656e74730000000000000000000000000000005f82015250565b5f613ee2601183613e9e565b9150613eed82613eae565b602082019050919050565b5f6020820190508181035f830152613f0f81613ed6565b9050919050565b7f706f736569646f6e33456c656d656e74730000000000000000000000000000005f82015250565b5f613f4a601183613e9e565b9150613f5582613f16565b602082019050919050565b5f6020820190508181035f830152613f7781613f3e565b9050919050565b7f706f736569646f6e34456c656d656e74730000000000000000000000000000005f82015250565b5f613fb2601183613e9e565b9150613fbd82613f7e565b602082019050919050565b5f6020820190508181035f830152613fdf81613fa6565b905091905056fea264697066735822122099e7972d569a94c2fd88419dac7650cc84f2bd93ea3eb323b310d63b4cfed32e64736f6c63430008170033",
}

// MainABI is the input ABI used to generate the binding from.
// Deprecated: Use MainMetaData.ABI instead.
var MainABI = MainMetaData.ABI

// MainBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MainMetaData.Bin instead.
var MainBin = MainMetaData.Bin

// DeployMain deploys a new Ethereum contract, binding an instance of Main to it.
func DeployMain(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Main, error) {
	parsed, err := MainMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MainBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Main{MainCaller: MainCaller{contract: contract}, MainTransactor: MainTransactor{contract: contract}, MainFilterer: MainFilterer{contract: contract}}, nil
}

// Main is an auto generated Go binding around an Ethereum contract.
type Main struct {
	MainCaller     // Read-only binding to the contract
	MainTransactor // Write-only binding to the contract
	MainFilterer   // Log filterer for contract events
}

// MainCaller is an auto generated read-only Go binding around an Ethereum contract.
type MainCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MainTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MainTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MainFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MainFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MainSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MainSession struct {
	Contract     *Main             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MainCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MainCallerSession struct {
	Contract *MainCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// MainTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MainTransactorSession struct {
	Contract     *MainTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MainRaw is an auto generated low-level Go binding around an Ethereum contract.
type MainRaw struct {
	Contract *Main // Generic contract binding to access the raw methods on
}

// MainCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MainCallerRaw struct {
	Contract *MainCaller // Generic read-only contract binding to access the raw methods on
}

// MainTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MainTransactorRaw struct {
	Contract *MainTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMain creates a new instance of Main, bound to a specific deployed contract.
func NewMain(address common.Address, backend bind.ContractBackend) (*Main, error) {
	contract, err := bindMain(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Main{MainCaller: MainCaller{contract: contract}, MainTransactor: MainTransactor{contract: contract}, MainFilterer: MainFilterer{contract: contract}}, nil
}

// NewMainCaller creates a new read-only instance of Main, bound to a specific deployed contract.
func NewMainCaller(address common.Address, caller bind.ContractCaller) (*MainCaller, error) {
	contract, err := bindMain(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MainCaller{contract: contract}, nil
}

// NewMainTransactor creates a new write-only instance of Main, bound to a specific deployed contract.
func NewMainTransactor(address common.Address, transactor bind.ContractTransactor) (*MainTransactor, error) {
	contract, err := bindMain(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MainTransactor{contract: contract}, nil
}

// NewMainFilterer creates a new log filterer instance of Main, bound to a specific deployed contract.
func NewMainFilterer(address common.Address, filterer bind.ContractFilterer) (*MainFilterer, error) {
	contract, err := bindMain(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MainFilterer{contract: contract}, nil
}

// bindMain binds a generic wrapper to an already deployed contract.
func bindMain(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MainMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Main *MainRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Main.Contract.MainCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Main *MainRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Main.Contract.MainTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Main *MainRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Main.Contract.MainTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Main *MainCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Main.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Main *MainTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Main.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Main *MainTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Main.Contract.contract.Transact(opts, method, params...)
}

// ABSOLUTEMAXBATCHTIMEOUT is a free data retrieval call binding the contract method 0x92d5df97.
//
// Solidity: function ABSOLUTE_MAX_BATCHTIMEOUT() view returns(uint8)
func (_Main *MainCaller) ABSOLUTEMAXBATCHTIMEOUT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "ABSOLUTE_MAX_BATCHTIMEOUT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ABSOLUTEMAXBATCHTIMEOUT is a free data retrieval call binding the contract method 0x92d5df97.
//
// Solidity: function ABSOLUTE_MAX_BATCHTIMEOUT() view returns(uint8)
func (_Main *MainSession) ABSOLUTEMAXBATCHTIMEOUT() (uint8, error) {
	return _Main.Contract.ABSOLUTEMAXBATCHTIMEOUT(&_Main.CallOpts)
}

// ABSOLUTEMAXBATCHTIMEOUT is a free data retrieval call binding the contract method 0x92d5df97.
//
// Solidity: function ABSOLUTE_MAX_BATCHTIMEOUT() view returns(uint8)
func (_Main *MainCallerSession) ABSOLUTEMAXBATCHTIMEOUT() (uint8, error) {
	return _Main.Contract.ABSOLUTEMAXBATCHTIMEOUT(&_Main.CallOpts)
}

// HashFinalNode is a free data retrieval call binding the contract method 0xbbe5a375.
//
// Solidity: function _hashFinalNode(uint256 key, uint256 value) view returns(uint256)
func (_Main *MainCaller) HashFinalNode(opts *bind.CallOpts, key *big.Int, value *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "_hashFinalNode", key, value)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// HashFinalNode is a free data retrieval call binding the contract method 0xbbe5a375.
//
// Solidity: function _hashFinalNode(uint256 key, uint256 value) view returns(uint256)
func (_Main *MainSession) HashFinalNode(key *big.Int, value *big.Int) (*big.Int, error) {
	return _Main.Contract.HashFinalNode(&_Main.CallOpts, key, value)
}

// HashFinalNode is a free data retrieval call binding the contract method 0xbbe5a375.
//
// Solidity: function _hashFinalNode(uint256 key, uint256 value) view returns(uint256)
func (_Main *MainCallerSession) HashFinalNode(key *big.Int, value *big.Int) (*big.Int, error) {
	return _Main.Contract.HashFinalNode(&_Main.CallOpts, key, value)
}

// HashNode is a free data retrieval call binding the contract method 0xc0b55ae4.
//
// Solidity: function _hashNode(uint256 left, uint256 right) view returns(uint256)
func (_Main *MainCaller) HashNode(opts *bind.CallOpts, left *big.Int, right *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "_hashNode", left, right)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// HashNode is a free data retrieval call binding the contract method 0xc0b55ae4.
//
// Solidity: function _hashNode(uint256 left, uint256 right) view returns(uint256)
func (_Main *MainSession) HashNode(left *big.Int, right *big.Int) (*big.Int, error) {
	return _Main.Contract.HashNode(&_Main.CallOpts, left, right)
}

// HashNode is a free data retrieval call binding the contract method 0xc0b55ae4.
//
// Solidity: function _hashNode(uint256 left, uint256 right) view returns(uint256)
func (_Main *MainCallerSession) HashNode(left *big.Int, right *big.Int) (*big.Int, error) {
	return _Main.Contract.HashNode(&_Main.CallOpts, left, right)
}

// AccountRootMap is a free data retrieval call binding the contract method 0x795c6167.
//
// Solidity: function accountRootMap(uint32 ) view returns(uint256)
func (_Main *MainCaller) AccountRootMap(opts *bind.CallOpts, arg0 uint32) (*big.Int, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "accountRootMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AccountRootMap is a free data retrieval call binding the contract method 0x795c6167.
//
// Solidity: function accountRootMap(uint32 ) view returns(uint256)
func (_Main *MainSession) AccountRootMap(arg0 uint32) (*big.Int, error) {
	return _Main.Contract.AccountRootMap(&_Main.CallOpts, arg0)
}

// AccountRootMap is a free data retrieval call binding the contract method 0x795c6167.
//
// Solidity: function accountRootMap(uint32 ) view returns(uint256)
func (_Main *MainCallerSession) AccountRootMap(arg0 uint32) (*big.Int, error) {
	return _Main.Contract.AccountRootMap(&_Main.CallOpts, arg0)
}

// CurrentFillingBatch is a free data retrieval call binding the contract method 0xc25d5789.
//
// Solidity: function currentFillingBatch() view returns(uint32)
func (_Main *MainCaller) CurrentFillingBatch(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "currentFillingBatch")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// CurrentFillingBatch is a free data retrieval call binding the contract method 0xc25d5789.
//
// Solidity: function currentFillingBatch() view returns(uint32)
func (_Main *MainSession) CurrentFillingBatch() (uint32, error) {
	return _Main.Contract.CurrentFillingBatch(&_Main.CallOpts)
}

// CurrentFillingBatch is a free data retrieval call binding the contract method 0xc25d5789.
//
// Solidity: function currentFillingBatch() view returns(uint32)
func (_Main *MainCallerSession) CurrentFillingBatch() (uint32, error) {
	return _Main.Contract.CurrentFillingBatch(&_Main.CallOpts)
}

// ExitNullifierMap is a free data retrieval call binding the contract method 0xf84f92ee.
//
// Solidity: function exitNullifierMap(uint32 , uint48 ) view returns(bool)
func (_Main *MainCaller) ExitNullifierMap(opts *bind.CallOpts, arg0 uint32, arg1 *big.Int) (bool, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "exitNullifierMap", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ExitNullifierMap is a free data retrieval call binding the contract method 0xf84f92ee.
//
// Solidity: function exitNullifierMap(uint32 , uint48 ) view returns(bool)
func (_Main *MainSession) ExitNullifierMap(arg0 uint32, arg1 *big.Int) (bool, error) {
	return _Main.Contract.ExitNullifierMap(&_Main.CallOpts, arg0, arg1)
}

// ExitNullifierMap is a free data retrieval call binding the contract method 0xf84f92ee.
//
// Solidity: function exitNullifierMap(uint32 , uint48 ) view returns(bool)
func (_Main *MainCallerSession) ExitNullifierMap(arg0 uint32, arg1 *big.Int) (bool, error) {
	return _Main.Contract.ExitNullifierMap(&_Main.CallOpts, arg0, arg1)
}

// ExitRootMap is a free data retrieval call binding the contract method 0xa5e2ec5b.
//
// Solidity: function exitRootMap(uint32 ) view returns(uint256)
func (_Main *MainCaller) ExitRootMap(opts *bind.CallOpts, arg0 uint32) (*big.Int, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "exitRootMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ExitRootMap is a free data retrieval call binding the contract method 0xa5e2ec5b.
//
// Solidity: function exitRootMap(uint32 ) view returns(uint256)
func (_Main *MainSession) ExitRootMap(arg0 uint32) (*big.Int, error) {
	return _Main.Contract.ExitRootMap(&_Main.CallOpts, arg0)
}

// ExitRootMap is a free data retrieval call binding the contract method 0xa5e2ec5b.
//
// Solidity: function exitRootMap(uint32 ) view returns(uint256)
func (_Main *MainCallerSession) ExitRootMap(arg0 uint32) (*big.Int, error) {
	return _Main.Contract.ExitRootMap(&_Main.CallOpts, arg0)
}

// GetL1TransactionQueue is a free data retrieval call binding the contract method 0xba2506df.
//
// Solidity: function getL1TransactionQueue(uint32 queueIndex) view returns(bytes)
func (_Main *MainCaller) GetL1TransactionQueue(opts *bind.CallOpts, queueIndex uint32) ([]byte, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "getL1TransactionQueue", queueIndex)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetL1TransactionQueue is a free data retrieval call binding the contract method 0xba2506df.
//
// Solidity: function getL1TransactionQueue(uint32 queueIndex) view returns(bytes)
func (_Main *MainSession) GetL1TransactionQueue(queueIndex uint32) ([]byte, error) {
	return _Main.Contract.GetL1TransactionQueue(&_Main.CallOpts, queueIndex)
}

// GetL1TransactionQueue is a free data retrieval call binding the contract method 0xba2506df.
//
// Solidity: function getL1TransactionQueue(uint32 queueIndex) view returns(bytes)
func (_Main *MainCallerSession) GetL1TransactionQueue(queueIndex uint32) ([]byte, error) {
	return _Main.Contract.GetL1TransactionQueue(&_Main.CallOpts, queueIndex)
}

// GetLastForgedBatch is a free data retrieval call binding the contract method 0x1b78164b.
//
// Solidity: function getLastForgedBatch() view returns(uint32)
func (_Main *MainCaller) GetLastForgedBatch(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "getLastForgedBatch")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetLastForgedBatch is a free data retrieval call binding the contract method 0x1b78164b.
//
// Solidity: function getLastForgedBatch() view returns(uint32)
func (_Main *MainSession) GetLastForgedBatch() (uint32, error) {
	return _Main.Contract.GetLastForgedBatch(&_Main.CallOpts)
}

// GetLastForgedBatch is a free data retrieval call binding the contract method 0x1b78164b.
//
// Solidity: function getLastForgedBatch() view returns(uint32)
func (_Main *MainCallerSession) GetLastForgedBatch() (uint32, error) {
	return _Main.Contract.GetLastForgedBatch(&_Main.CallOpts)
}

// GetQueueLength is a free data retrieval call binding the contract method 0xb8f77005.
//
// Solidity: function getQueueLength() view returns(uint32)
func (_Main *MainCaller) GetQueueLength(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "getQueueLength")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetQueueLength is a free data retrieval call binding the contract method 0xb8f77005.
//
// Solidity: function getQueueLength() view returns(uint32)
func (_Main *MainSession) GetQueueLength() (uint32, error) {
	return _Main.Contract.GetQueueLength(&_Main.CallOpts)
}

// GetQueueLength is a free data retrieval call binding the contract method 0xb8f77005.
//
// Solidity: function getQueueLength() view returns(uint32)
func (_Main *MainCallerSession) GetQueueLength() (uint32, error) {
	return _Main.Contract.GetQueueLength(&_Main.CallOpts)
}

// GetStateRoot is a free data retrieval call binding the contract method 0x3009c59f.
//
// Solidity: function getStateRoot(uint32 batchNum) view returns(uint256)
func (_Main *MainCaller) GetStateRoot(opts *bind.CallOpts, batchNum uint32) (*big.Int, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "getStateRoot", batchNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStateRoot is a free data retrieval call binding the contract method 0x3009c59f.
//
// Solidity: function getStateRoot(uint32 batchNum) view returns(uint256)
func (_Main *MainSession) GetStateRoot(batchNum uint32) (*big.Int, error) {
	return _Main.Contract.GetStateRoot(&_Main.CallOpts, batchNum)
}

// GetStateRoot is a free data retrieval call binding the contract method 0x3009c59f.
//
// Solidity: function getStateRoot(uint32 batchNum) view returns(uint256)
func (_Main *MainCallerSession) GetStateRoot(batchNum uint32) (*big.Int, error) {
	return _Main.Contract.GetStateRoot(&_Main.CallOpts, batchNum)
}

// LastForgedBatch is a free data retrieval call binding the contract method 0x44e0b2ce.
//
// Solidity: function lastForgedBatch() view returns(uint32)
func (_Main *MainCaller) LastForgedBatch(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "lastForgedBatch")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// LastForgedBatch is a free data retrieval call binding the contract method 0x44e0b2ce.
//
// Solidity: function lastForgedBatch() view returns(uint32)
func (_Main *MainSession) LastForgedBatch() (uint32, error) {
	return _Main.Contract.LastForgedBatch(&_Main.CallOpts)
}

// LastForgedBatch is a free data retrieval call binding the contract method 0x44e0b2ce.
//
// Solidity: function lastForgedBatch() view returns(uint32)
func (_Main *MainCallerSession) LastForgedBatch() (uint32, error) {
	return _Main.Contract.LastForgedBatch(&_Main.CallOpts)
}

// LastIdx is a free data retrieval call binding the contract method 0xd486645c.
//
// Solidity: function lastIdx() view returns(uint48)
func (_Main *MainCaller) LastIdx(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "lastIdx")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastIdx is a free data retrieval call binding the contract method 0xd486645c.
//
// Solidity: function lastIdx() view returns(uint48)
func (_Main *MainSession) LastIdx() (*big.Int, error) {
	return _Main.Contract.LastIdx(&_Main.CallOpts)
}

// LastIdx is a free data retrieval call binding the contract method 0xd486645c.
//
// Solidity: function lastIdx() view returns(uint48)
func (_Main *MainCallerSession) LastIdx() (*big.Int, error) {
	return _Main.Contract.LastIdx(&_Main.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Main *MainCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Main *MainSession) Owner() (common.Address, error) {
	return _Main.Contract.Owner(&_Main.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Main *MainCallerSession) Owner() (common.Address, error) {
	return _Main.Contract.Owner(&_Main.CallOpts)
}

// RollupVerifier is a free data retrieval call binding the contract method 0xe8bf92ed.
//
// Solidity: function rollupVerifier() view returns(address verifierInterface, uint256 maxTx, uint256 nLevel)
func (_Main *MainCaller) RollupVerifier(opts *bind.CallOpts) (struct {
	VerifierInterface common.Address
	MaxTx             *big.Int
	NLevel            *big.Int
}, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "rollupVerifier")

	outstruct := new(struct {
		VerifierInterface common.Address
		MaxTx             *big.Int
		NLevel            *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.VerifierInterface = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.MaxTx = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.NLevel = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// RollupVerifier is a free data retrieval call binding the contract method 0xe8bf92ed.
//
// Solidity: function rollupVerifier() view returns(address verifierInterface, uint256 maxTx, uint256 nLevel)
func (_Main *MainSession) RollupVerifier() (struct {
	VerifierInterface common.Address
	MaxTx             *big.Int
	NLevel            *big.Int
}, error) {
	return _Main.Contract.RollupVerifier(&_Main.CallOpts)
}

// RollupVerifier is a free data retrieval call binding the contract method 0xe8bf92ed.
//
// Solidity: function rollupVerifier() view returns(address verifierInterface, uint256 maxTx, uint256 nLevel)
func (_Main *MainCallerSession) RollupVerifier() (struct {
	VerifierInterface common.Address
	MaxTx             *big.Int
	NLevel            *big.Int
}, error) {
	return _Main.Contract.RollupVerifier(&_Main.CallOpts)
}

// ScoreRootMap is a free data retrieval call binding the contract method 0xbd8a4a61.
//
// Solidity: function scoreRootMap(uint32 ) view returns(uint256)
func (_Main *MainCaller) ScoreRootMap(opts *bind.CallOpts, arg0 uint32) (*big.Int, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "scoreRootMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScoreRootMap is a free data retrieval call binding the contract method 0xbd8a4a61.
//
// Solidity: function scoreRootMap(uint32 ) view returns(uint256)
func (_Main *MainSession) ScoreRootMap(arg0 uint32) (*big.Int, error) {
	return _Main.Contract.ScoreRootMap(&_Main.CallOpts, arg0)
}

// ScoreRootMap is a free data retrieval call binding the contract method 0xbd8a4a61.
//
// Solidity: function scoreRootMap(uint32 ) view returns(uint256)
func (_Main *MainCallerSession) ScoreRootMap(arg0 uint32) (*big.Int, error) {
	return _Main.Contract.ScoreRootMap(&_Main.CallOpts, arg0)
}

// SetForgeL1BatchTimeout is a free data retrieval call binding the contract method 0xc021501b.
//
// Solidity: function setForgeL1BatchTimeout(uint8 newTimeout) pure returns()
func (_Main *MainCaller) SetForgeL1BatchTimeout(opts *bind.CallOpts, newTimeout uint8) error {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "setForgeL1BatchTimeout", newTimeout)

	if err != nil {
		return err
	}

	return err

}

// SetForgeL1BatchTimeout is a free data retrieval call binding the contract method 0xc021501b.
//
// Solidity: function setForgeL1BatchTimeout(uint8 newTimeout) pure returns()
func (_Main *MainSession) SetForgeL1BatchTimeout(newTimeout uint8) error {
	return _Main.Contract.SetForgeL1BatchTimeout(&_Main.CallOpts, newTimeout)
}

// SetForgeL1BatchTimeout is a free data retrieval call binding the contract method 0xc021501b.
//
// Solidity: function setForgeL1BatchTimeout(uint8 newTimeout) pure returns()
func (_Main *MainCallerSession) SetForgeL1BatchTimeout(newTimeout uint8) error {
	return _Main.Contract.SetForgeL1BatchTimeout(&_Main.CallOpts, newTimeout)
}

// UnprocessedBatchesMap is a free data retrieval call binding the contract method 0xef8140b5.
//
// Solidity: function unprocessedBatchesMap(uint32 ) view returns(bytes)
func (_Main *MainCaller) UnprocessedBatchesMap(opts *bind.CallOpts, arg0 uint32) ([]byte, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "unprocessedBatchesMap", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// UnprocessedBatchesMap is a free data retrieval call binding the contract method 0xef8140b5.
//
// Solidity: function unprocessedBatchesMap(uint32 ) view returns(bytes)
func (_Main *MainSession) UnprocessedBatchesMap(arg0 uint32) ([]byte, error) {
	return _Main.Contract.UnprocessedBatchesMap(&_Main.CallOpts, arg0)
}

// UnprocessedBatchesMap is a free data retrieval call binding the contract method 0xef8140b5.
//
// Solidity: function unprocessedBatchesMap(uint32 ) view returns(bytes)
func (_Main *MainCallerSession) UnprocessedBatchesMap(arg0 uint32) ([]byte, error) {
	return _Main.Contract.UnprocessedBatchesMap(&_Main.CallOpts, arg0)
}

// VouchRootMap is a free data retrieval call binding the contract method 0xadacd33b.
//
// Solidity: function vouchRootMap(uint32 ) view returns(uint256)
func (_Main *MainCaller) VouchRootMap(opts *bind.CallOpts, arg0 uint32) (*big.Int, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "vouchRootMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VouchRootMap is a free data retrieval call binding the contract method 0xadacd33b.
//
// Solidity: function vouchRootMap(uint32 ) view returns(uint256)
func (_Main *MainSession) VouchRootMap(arg0 uint32) (*big.Int, error) {
	return _Main.Contract.VouchRootMap(&_Main.CallOpts, arg0)
}

// VouchRootMap is a free data retrieval call binding the contract method 0xadacd33b.
//
// Solidity: function vouchRootMap(uint32 ) view returns(uint256)
func (_Main *MainCallerSession) VouchRootMap(arg0 uint32) (*big.Int, error) {
	return _Main.Contract.VouchRootMap(&_Main.CallOpts, arg0)
}

// AddTx is a paid mutator transaction binding the contract method 0x2f463f59.
//
// Solidity: function _addTx(address ethAddress, uint48 fromIdx, uint40 loadAmountF, uint40 amountF, uint48 toIdx) returns()
func (_Main *MainTransactor) AddTx(opts *bind.TransactOpts, ethAddress common.Address, fromIdx *big.Int, loadAmountF *big.Int, amountF *big.Int, toIdx *big.Int) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "_addTx", ethAddress, fromIdx, loadAmountF, amountF, toIdx)
}

// AddTx is a paid mutator transaction binding the contract method 0x2f463f59.
//
// Solidity: function _addTx(address ethAddress, uint48 fromIdx, uint40 loadAmountF, uint40 amountF, uint48 toIdx) returns()
func (_Main *MainSession) AddTx(ethAddress common.Address, fromIdx *big.Int, loadAmountF *big.Int, amountF *big.Int, toIdx *big.Int) (*types.Transaction, error) {
	return _Main.Contract.AddTx(&_Main.TransactOpts, ethAddress, fromIdx, loadAmountF, amountF, toIdx)
}

// AddTx is a paid mutator transaction binding the contract method 0x2f463f59.
//
// Solidity: function _addTx(address ethAddress, uint48 fromIdx, uint40 loadAmountF, uint40 amountF, uint48 toIdx) returns()
func (_Main *MainTransactorSession) AddTx(ethAddress common.Address, fromIdx *big.Int, loadAmountF *big.Int, amountF *big.Int, toIdx *big.Int) (*types.Transaction, error) {
	return _Main.Contract.AddTx(&_Main.TransactOpts, ethAddress, fromIdx, loadAmountF, amountF, toIdx)
}

// CreateAccountDeposit is a paid mutator transaction binding the contract method 0xfbb4a00f.
//
// Solidity: function createAccountDeposit(uint40 loadAmountF) payable returns()
func (_Main *MainTransactor) CreateAccountDeposit(opts *bind.TransactOpts, loadAmountF *big.Int) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "createAccountDeposit", loadAmountF)
}

// CreateAccountDeposit is a paid mutator transaction binding the contract method 0xfbb4a00f.
//
// Solidity: function createAccountDeposit(uint40 loadAmountF) payable returns()
func (_Main *MainSession) CreateAccountDeposit(loadAmountF *big.Int) (*types.Transaction, error) {
	return _Main.Contract.CreateAccountDeposit(&_Main.TransactOpts, loadAmountF)
}

// CreateAccountDeposit is a paid mutator transaction binding the contract method 0xfbb4a00f.
//
// Solidity: function createAccountDeposit(uint40 loadAmountF) payable returns()
func (_Main *MainTransactorSession) CreateAccountDeposit(loadAmountF *big.Int) (*types.Transaction, error) {
	return _Main.Contract.CreateAccountDeposit(&_Main.TransactOpts, loadAmountF)
}

// Deposit is a paid mutator transaction binding the contract method 0x212bafd7.
//
// Solidity: function deposit(uint48 fromIdx, uint40 loadAmountF) payable returns()
func (_Main *MainTransactor) Deposit(opts *bind.TransactOpts, fromIdx *big.Int, loadAmountF *big.Int) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "deposit", fromIdx, loadAmountF)
}

// Deposit is a paid mutator transaction binding the contract method 0x212bafd7.
//
// Solidity: function deposit(uint48 fromIdx, uint40 loadAmountF) payable returns()
func (_Main *MainSession) Deposit(fromIdx *big.Int, loadAmountF *big.Int) (*types.Transaction, error) {
	return _Main.Contract.Deposit(&_Main.TransactOpts, fromIdx, loadAmountF)
}

// Deposit is a paid mutator transaction binding the contract method 0x212bafd7.
//
// Solidity: function deposit(uint48 fromIdx, uint40 loadAmountF) payable returns()
func (_Main *MainTransactorSession) Deposit(fromIdx *big.Int, loadAmountF *big.Int) (*types.Transaction, error) {
	return _Main.Contract.Deposit(&_Main.TransactOpts, fromIdx, loadAmountF)
}

// Exit is a paid mutator transaction binding the contract method 0x8195b790.
//
// Solidity: function exit(uint48 fromIdx, uint40 amountF) returns()
func (_Main *MainTransactor) Exit(opts *bind.TransactOpts, fromIdx *big.Int, amountF *big.Int) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "exit", fromIdx, amountF)
}

// Exit is a paid mutator transaction binding the contract method 0x8195b790.
//
// Solidity: function exit(uint48 fromIdx, uint40 amountF) returns()
func (_Main *MainSession) Exit(fromIdx *big.Int, amountF *big.Int) (*types.Transaction, error) {
	return _Main.Contract.Exit(&_Main.TransactOpts, fromIdx, amountF)
}

// Exit is a paid mutator transaction binding the contract method 0x8195b790.
//
// Solidity: function exit(uint48 fromIdx, uint40 amountF) returns()
func (_Main *MainTransactorSession) Exit(fromIdx *big.Int, amountF *big.Int) (*types.Transaction, error) {
	return _Main.Contract.Exit(&_Main.TransactOpts, fromIdx, amountF)
}

// ExplodeMultiple is a paid mutator transaction binding the contract method 0x894bc2b8.
//
// Solidity: function explodeMultiple(uint48 fromIdx, uint48[] toIdxs) returns()
func (_Main *MainTransactor) ExplodeMultiple(opts *bind.TransactOpts, fromIdx *big.Int, toIdxs []*big.Int) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "explodeMultiple", fromIdx, toIdxs)
}

// ExplodeMultiple is a paid mutator transaction binding the contract method 0x894bc2b8.
//
// Solidity: function explodeMultiple(uint48 fromIdx, uint48[] toIdxs) returns()
func (_Main *MainSession) ExplodeMultiple(fromIdx *big.Int, toIdxs []*big.Int) (*types.Transaction, error) {
	return _Main.Contract.ExplodeMultiple(&_Main.TransactOpts, fromIdx, toIdxs)
}

// ExplodeMultiple is a paid mutator transaction binding the contract method 0x894bc2b8.
//
// Solidity: function explodeMultiple(uint48 fromIdx, uint48[] toIdxs) returns()
func (_Main *MainTransactorSession) ExplodeMultiple(fromIdx *big.Int, toIdxs []*big.Int) (*types.Transaction, error) {
	return _Main.Contract.ExplodeMultiple(&_Main.TransactOpts, fromIdx, toIdxs)
}

// ForgeBatch is a paid mutator transaction binding the contract method 0xb1f073d4.
//
// Solidity: function forgeBatch(uint48 newLastIdx, uint256 newAccountRoot, uint256 newVouchRoot, uint256 newScoreRoot, uint256 newExitRoot, uint256[2] proofA, uint256[2][2] proofB, uint256[2] proofC) returns()
func (_Main *MainTransactor) ForgeBatch(opts *bind.TransactOpts, newLastIdx *big.Int, newAccountRoot *big.Int, newVouchRoot *big.Int, newScoreRoot *big.Int, newExitRoot *big.Int, proofA [2]*big.Int, proofB [2][2]*big.Int, proofC [2]*big.Int) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "forgeBatch", newLastIdx, newAccountRoot, newVouchRoot, newScoreRoot, newExitRoot, proofA, proofB, proofC)
}

// ForgeBatch is a paid mutator transaction binding the contract method 0xb1f073d4.
//
// Solidity: function forgeBatch(uint48 newLastIdx, uint256 newAccountRoot, uint256 newVouchRoot, uint256 newScoreRoot, uint256 newExitRoot, uint256[2] proofA, uint256[2][2] proofB, uint256[2] proofC) returns()
func (_Main *MainSession) ForgeBatch(newLastIdx *big.Int, newAccountRoot *big.Int, newVouchRoot *big.Int, newScoreRoot *big.Int, newExitRoot *big.Int, proofA [2]*big.Int, proofB [2][2]*big.Int, proofC [2]*big.Int) (*types.Transaction, error) {
	return _Main.Contract.ForgeBatch(&_Main.TransactOpts, newLastIdx, newAccountRoot, newVouchRoot, newScoreRoot, newExitRoot, proofA, proofB, proofC)
}

// ForgeBatch is a paid mutator transaction binding the contract method 0xb1f073d4.
//
// Solidity: function forgeBatch(uint48 newLastIdx, uint256 newAccountRoot, uint256 newVouchRoot, uint256 newScoreRoot, uint256 newExitRoot, uint256[2] proofA, uint256[2][2] proofB, uint256[2] proofC) returns()
func (_Main *MainTransactorSession) ForgeBatch(newLastIdx *big.Int, newAccountRoot *big.Int, newVouchRoot *big.Int, newScoreRoot *big.Int, newExitRoot *big.Int, proofA [2]*big.Int, proofB [2][2]*big.Int, proofC [2]*big.Int) (*types.Transaction, error) {
	return _Main.Contract.ForgeBatch(&_Main.TransactOpts, newLastIdx, newAccountRoot, newVouchRoot, newScoreRoot, newExitRoot, proofA, proofB, proofC)
}

// Initialize is a paid mutator transaction binding the contract method 0xed54b2f4.
//
// Solidity: function initialize(address verifier, uint256 maxTx, uint256 nLevel, uint8 _forgeBatchTimeout, address _poseidon2Elements, address _poseidon3Elements, address _poseidon4Elements) returns()
func (_Main *MainTransactor) Initialize(opts *bind.TransactOpts, verifier common.Address, maxTx *big.Int, nLevel *big.Int, _forgeBatchTimeout uint8, _poseidon2Elements common.Address, _poseidon3Elements common.Address, _poseidon4Elements common.Address) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "initialize", verifier, maxTx, nLevel, _forgeBatchTimeout, _poseidon2Elements, _poseidon3Elements, _poseidon4Elements)
}

// Initialize is a paid mutator transaction binding the contract method 0xed54b2f4.
//
// Solidity: function initialize(address verifier, uint256 maxTx, uint256 nLevel, uint8 _forgeBatchTimeout, address _poseidon2Elements, address _poseidon3Elements, address _poseidon4Elements) returns()
func (_Main *MainSession) Initialize(verifier common.Address, maxTx *big.Int, nLevel *big.Int, _forgeBatchTimeout uint8, _poseidon2Elements common.Address, _poseidon3Elements common.Address, _poseidon4Elements common.Address) (*types.Transaction, error) {
	return _Main.Contract.Initialize(&_Main.TransactOpts, verifier, maxTx, nLevel, _forgeBatchTimeout, _poseidon2Elements, _poseidon3Elements, _poseidon4Elements)
}

// Initialize is a paid mutator transaction binding the contract method 0xed54b2f4.
//
// Solidity: function initialize(address verifier, uint256 maxTx, uint256 nLevel, uint8 _forgeBatchTimeout, address _poseidon2Elements, address _poseidon3Elements, address _poseidon4Elements) returns()
func (_Main *MainTransactorSession) Initialize(verifier common.Address, maxTx *big.Int, nLevel *big.Int, _forgeBatchTimeout uint8, _poseidon2Elements common.Address, _poseidon3Elements common.Address, _poseidon4Elements common.Address) (*types.Transaction, error) {
	return _Main.Contract.Initialize(&_Main.TransactOpts, verifier, maxTx, nLevel, _forgeBatchTimeout, _poseidon2Elements, _poseidon3Elements, _poseidon4Elements)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Main *MainTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Main *MainSession) RenounceOwnership() (*types.Transaction, error) {
	return _Main.Contract.RenounceOwnership(&_Main.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Main *MainTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Main.Contract.RenounceOwnership(&_Main.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Main *MainTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Main *MainSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Main.Contract.TransferOwnership(&_Main.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Main *MainTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Main.Contract.TransferOwnership(&_Main.TransactOpts, newOwner)
}

// Unvouch is a paid mutator transaction binding the contract method 0xc1b190c0.
//
// Solidity: function unvouch(uint48 fromIdx, uint48 toIdx) returns()
func (_Main *MainTransactor) Unvouch(opts *bind.TransactOpts, fromIdx *big.Int, toIdx *big.Int) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "unvouch", fromIdx, toIdx)
}

// Unvouch is a paid mutator transaction binding the contract method 0xc1b190c0.
//
// Solidity: function unvouch(uint48 fromIdx, uint48 toIdx) returns()
func (_Main *MainSession) Unvouch(fromIdx *big.Int, toIdx *big.Int) (*types.Transaction, error) {
	return _Main.Contract.Unvouch(&_Main.TransactOpts, fromIdx, toIdx)
}

// Unvouch is a paid mutator transaction binding the contract method 0xc1b190c0.
//
// Solidity: function unvouch(uint48 fromIdx, uint48 toIdx) returns()
func (_Main *MainTransactorSession) Unvouch(fromIdx *big.Int, toIdx *big.Int) (*types.Transaction, error) {
	return _Main.Contract.Unvouch(&_Main.TransactOpts, fromIdx, toIdx)
}

// Vouch is a paid mutator transaction binding the contract method 0x11954d3c.
//
// Solidity: function vouch(uint48 fromIdx, uint48 toIdx) returns()
func (_Main *MainTransactor) Vouch(opts *bind.TransactOpts, fromIdx *big.Int, toIdx *big.Int) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "vouch", fromIdx, toIdx)
}

// Vouch is a paid mutator transaction binding the contract method 0x11954d3c.
//
// Solidity: function vouch(uint48 fromIdx, uint48 toIdx) returns()
func (_Main *MainSession) Vouch(fromIdx *big.Int, toIdx *big.Int) (*types.Transaction, error) {
	return _Main.Contract.Vouch(&_Main.TransactOpts, fromIdx, toIdx)
}

// Vouch is a paid mutator transaction binding the contract method 0x11954d3c.
//
// Solidity: function vouch(uint48 fromIdx, uint48 toIdx) returns()
func (_Main *MainTransactorSession) Vouch(fromIdx *big.Int, toIdx *big.Int) (*types.Transaction, error) {
	return _Main.Contract.Vouch(&_Main.TransactOpts, fromIdx, toIdx)
}

// WithdrawMerkleProof is a paid mutator transaction binding the contract method 0x62332ee2.
//
// Solidity: function withdrawMerkleProof(uint192 amount, uint32 numExitRoot, uint256[] siblings, uint48 idx) returns()
func (_Main *MainTransactor) WithdrawMerkleProof(opts *bind.TransactOpts, amount *big.Int, numExitRoot uint32, siblings []*big.Int, idx *big.Int) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "withdrawMerkleProof", amount, numExitRoot, siblings, idx)
}

// WithdrawMerkleProof is a paid mutator transaction binding the contract method 0x62332ee2.
//
// Solidity: function withdrawMerkleProof(uint192 amount, uint32 numExitRoot, uint256[] siblings, uint48 idx) returns()
func (_Main *MainSession) WithdrawMerkleProof(amount *big.Int, numExitRoot uint32, siblings []*big.Int, idx *big.Int) (*types.Transaction, error) {
	return _Main.Contract.WithdrawMerkleProof(&_Main.TransactOpts, amount, numExitRoot, siblings, idx)
}

// WithdrawMerkleProof is a paid mutator transaction binding the contract method 0x62332ee2.
//
// Solidity: function withdrawMerkleProof(uint192 amount, uint32 numExitRoot, uint256[] siblings, uint48 idx) returns()
func (_Main *MainTransactorSession) WithdrawMerkleProof(amount *big.Int, numExitRoot uint32, siblings []*big.Int, idx *big.Int) (*types.Transaction, error) {
	return _Main.Contract.WithdrawMerkleProof(&_Main.TransactOpts, amount, numExitRoot, siblings, idx)
}

// MainForgeBatchIterator is returned from FilterForgeBatch and is used to iterate over the raw logs and unpacked data for ForgeBatch events raised by the Main contract.
type MainForgeBatchIterator struct {
	Event *MainForgeBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainForgeBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainForgeBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainForgeBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainForgeBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainForgeBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainForgeBatch represents a ForgeBatch event raised by the Main contract.
type MainForgeBatch struct {
	BatchNum     uint32
	L1UserTxsLen uint16
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterForgeBatch is a free log retrieval operation binding the contract event 0xe00040c8a3b0bf905636c26924e90520eafc5003324138236fddee2d34588618.
//
// Solidity: event ForgeBatch(uint32 indexed batchNum, uint16 l1UserTxsLen)
func (_Main *MainFilterer) FilterForgeBatch(opts *bind.FilterOpts, batchNum []uint32) (*MainForgeBatchIterator, error) {

	var batchNumRule []interface{}
	for _, batchNumItem := range batchNum {
		batchNumRule = append(batchNumRule, batchNumItem)
	}

	logs, sub, err := _Main.contract.FilterLogs(opts, "ForgeBatch", batchNumRule)
	if err != nil {
		return nil, err
	}
	return &MainForgeBatchIterator{contract: _Main.contract, event: "ForgeBatch", logs: logs, sub: sub}, nil
}

// WatchForgeBatch is a free log subscription operation binding the contract event 0xe00040c8a3b0bf905636c26924e90520eafc5003324138236fddee2d34588618.
//
// Solidity: event ForgeBatch(uint32 indexed batchNum, uint16 l1UserTxsLen)
func (_Main *MainFilterer) WatchForgeBatch(opts *bind.WatchOpts, sink chan<- *MainForgeBatch, batchNum []uint32) (event.Subscription, error) {

	var batchNumRule []interface{}
	for _, batchNumItem := range batchNum {
		batchNumRule = append(batchNumRule, batchNumItem)
	}

	logs, sub, err := _Main.contract.WatchLogs(opts, "ForgeBatch", batchNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainForgeBatch)
				if err := _Main.contract.UnpackLog(event, "ForgeBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseForgeBatch is a log parse operation binding the contract event 0xe00040c8a3b0bf905636c26924e90520eafc5003324138236fddee2d34588618.
//
// Solidity: event ForgeBatch(uint32 indexed batchNum, uint16 l1UserTxsLen)
func (_Main *MainFilterer) ParseForgeBatch(log types.Log) (*MainForgeBatch, error) {
	event := new(MainForgeBatch)
	if err := _Main.contract.UnpackLog(event, "ForgeBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MainInitializeIterator is returned from FilterInitialize and is used to iterate over the raw logs and unpacked data for Initialize events raised by the Main contract.
type MainInitializeIterator struct {
	Event *MainInitialize // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainInitializeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainInitialize)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainInitialize)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainInitializeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainInitializeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainInitialize represents a Initialize event raised by the Main contract.
type MainInitialize struct {
	ForgeL1BatchTimeout uint8
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterInitialize is a free log retrieval operation binding the contract event 0xd2b214d5e2d2f958eb3b30690fa010715ebfdb9438837a496031fd1d0462e593.
//
// Solidity: event Initialize(uint8 forgeL1BatchTimeout)
func (_Main *MainFilterer) FilterInitialize(opts *bind.FilterOpts) (*MainInitializeIterator, error) {

	logs, sub, err := _Main.contract.FilterLogs(opts, "Initialize")
	if err != nil {
		return nil, err
	}
	return &MainInitializeIterator{contract: _Main.contract, event: "Initialize", logs: logs, sub: sub}, nil
}

// WatchInitialize is a free log subscription operation binding the contract event 0xd2b214d5e2d2f958eb3b30690fa010715ebfdb9438837a496031fd1d0462e593.
//
// Solidity: event Initialize(uint8 forgeL1BatchTimeout)
func (_Main *MainFilterer) WatchInitialize(opts *bind.WatchOpts, sink chan<- *MainInitialize) (event.Subscription, error) {

	logs, sub, err := _Main.contract.WatchLogs(opts, "Initialize")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainInitialize)
				if err := _Main.contract.UnpackLog(event, "Initialize", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialize is a log parse operation binding the contract event 0xd2b214d5e2d2f958eb3b30690fa010715ebfdb9438837a496031fd1d0462e593.
//
// Solidity: event Initialize(uint8 forgeL1BatchTimeout)
func (_Main *MainFilterer) ParseInitialize(log types.Log) (*MainInitialize, error) {
	event := new(MainInitialize)
	if err := _Main.contract.UnpackLog(event, "Initialize", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MainInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Main contract.
type MainInitializedIterator struct {
	Event *MainInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainInitialized represents a Initialized event raised by the Main contract.
type MainInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_Main *MainFilterer) FilterInitialized(opts *bind.FilterOpts) (*MainInitializedIterator, error) {

	logs, sub, err := _Main.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &MainInitializedIterator{contract: _Main.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_Main *MainFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *MainInitialized) (event.Subscription, error) {

	logs, sub, err := _Main.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainInitialized)
				if err := _Main.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_Main *MainFilterer) ParseInitialized(log types.Log) (*MainInitialized, error) {
	event := new(MainInitialized)
	if err := _Main.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MainL1UserTxEventIterator is returned from FilterL1UserTxEvent and is used to iterate over the raw logs and unpacked data for L1UserTxEvent events raised by the Main contract.
type MainL1UserTxEventIterator struct {
	Event *MainL1UserTxEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainL1UserTxEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainL1UserTxEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainL1UserTxEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainL1UserTxEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainL1UserTxEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainL1UserTxEvent represents a L1UserTxEvent event raised by the Main contract.
type MainL1UserTxEvent struct {
	QueueIndex uint32
	Position   uint8
	L1UserTx   []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterL1UserTxEvent is a free log retrieval operation binding the contract event 0xdd5c7c5ea02d3c5d1621513faa6de53d474ee6f111eda6352a63e3dfe8c40119.
//
// Solidity: event L1UserTxEvent(uint32 indexed queueIndex, uint8 indexed position, bytes l1UserTx)
func (_Main *MainFilterer) FilterL1UserTxEvent(opts *bind.FilterOpts, queueIndex []uint32, position []uint8) (*MainL1UserTxEventIterator, error) {

	var queueIndexRule []interface{}
	for _, queueIndexItem := range queueIndex {
		queueIndexRule = append(queueIndexRule, queueIndexItem)
	}
	var positionRule []interface{}
	for _, positionItem := range position {
		positionRule = append(positionRule, positionItem)
	}

	logs, sub, err := _Main.contract.FilterLogs(opts, "L1UserTxEvent", queueIndexRule, positionRule)
	if err != nil {
		return nil, err
	}
	return &MainL1UserTxEventIterator{contract: _Main.contract, event: "L1UserTxEvent", logs: logs, sub: sub}, nil
}

// WatchL1UserTxEvent is a free log subscription operation binding the contract event 0xdd5c7c5ea02d3c5d1621513faa6de53d474ee6f111eda6352a63e3dfe8c40119.
//
// Solidity: event L1UserTxEvent(uint32 indexed queueIndex, uint8 indexed position, bytes l1UserTx)
func (_Main *MainFilterer) WatchL1UserTxEvent(opts *bind.WatchOpts, sink chan<- *MainL1UserTxEvent, queueIndex []uint32, position []uint8) (event.Subscription, error) {

	var queueIndexRule []interface{}
	for _, queueIndexItem := range queueIndex {
		queueIndexRule = append(queueIndexRule, queueIndexItem)
	}
	var positionRule []interface{}
	for _, positionItem := range position {
		positionRule = append(positionRule, positionItem)
	}

	logs, sub, err := _Main.contract.WatchLogs(opts, "L1UserTxEvent", queueIndexRule, positionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainL1UserTxEvent)
				if err := _Main.contract.UnpackLog(event, "L1UserTxEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseL1UserTxEvent is a log parse operation binding the contract event 0xdd5c7c5ea02d3c5d1621513faa6de53d474ee6f111eda6352a63e3dfe8c40119.
//
// Solidity: event L1UserTxEvent(uint32 indexed queueIndex, uint8 indexed position, bytes l1UserTx)
func (_Main *MainFilterer) ParseL1UserTxEvent(log types.Log) (*MainL1UserTxEvent, error) {
	event := new(MainL1UserTxEvent)
	if err := _Main.contract.UnpackLog(event, "L1UserTxEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MainOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Main contract.
type MainOwnershipTransferredIterator struct {
	Event *MainOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainOwnershipTransferred represents a OwnershipTransferred event raised by the Main contract.
type MainOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Main *MainFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*MainOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Main.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &MainOwnershipTransferredIterator{contract: _Main.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Main *MainFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MainOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Main.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainOwnershipTransferred)
				if err := _Main.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Main *MainFilterer) ParseOwnershipTransferred(log types.Log) (*MainOwnershipTransferred, error) {
	event := new(MainOwnershipTransferred)
	if err := _Main.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MainWithdrawEventIterator is returned from FilterWithdrawEvent and is used to iterate over the raw logs and unpacked data for WithdrawEvent events raised by the Main contract.
type MainWithdrawEventIterator struct {
	Event *MainWithdrawEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainWithdrawEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainWithdrawEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainWithdrawEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainWithdrawEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainWithdrawEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainWithdrawEvent represents a WithdrawEvent event raised by the Main contract.
type MainWithdrawEvent struct {
	Idx         *big.Int
	NumExitRoot uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterWithdrawEvent is a free log retrieval operation binding the contract event 0x102db758451b2f65238246a452d00c0c4c8f59d8c623aff254111079418e57ec.
//
// Solidity: event WithdrawEvent(uint48 indexed idx, uint32 indexed numExitRoot)
func (_Main *MainFilterer) FilterWithdrawEvent(opts *bind.FilterOpts, idx []*big.Int, numExitRoot []uint32) (*MainWithdrawEventIterator, error) {

	var idxRule []interface{}
	for _, idxItem := range idx {
		idxRule = append(idxRule, idxItem)
	}
	var numExitRootRule []interface{}
	for _, numExitRootItem := range numExitRoot {
		numExitRootRule = append(numExitRootRule, numExitRootItem)
	}

	logs, sub, err := _Main.contract.FilterLogs(opts, "WithdrawEvent", idxRule, numExitRootRule)
	if err != nil {
		return nil, err
	}
	return &MainWithdrawEventIterator{contract: _Main.contract, event: "WithdrawEvent", logs: logs, sub: sub}, nil
}

// WatchWithdrawEvent is a free log subscription operation binding the contract event 0x102db758451b2f65238246a452d00c0c4c8f59d8c623aff254111079418e57ec.
//
// Solidity: event WithdrawEvent(uint48 indexed idx, uint32 indexed numExitRoot)
func (_Main *MainFilterer) WatchWithdrawEvent(opts *bind.WatchOpts, sink chan<- *MainWithdrawEvent, idx []*big.Int, numExitRoot []uint32) (event.Subscription, error) {

	var idxRule []interface{}
	for _, idxItem := range idx {
		idxRule = append(idxRule, idxItem)
	}
	var numExitRootRule []interface{}
	for _, numExitRootItem := range numExitRoot {
		numExitRootRule = append(numExitRootRule, numExitRootItem)
	}

	logs, sub, err := _Main.contract.WatchLogs(opts, "WithdrawEvent", idxRule, numExitRootRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainWithdrawEvent)
				if err := _Main.contract.UnpackLog(event, "WithdrawEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawEvent is a log parse operation binding the contract event 0x102db758451b2f65238246a452d00c0c4c8f59d8c623aff254111079418e57ec.
//
// Solidity: event WithdrawEvent(uint48 indexed idx, uint32 indexed numExitRoot)
func (_Main *MainFilterer) ParseWithdrawEvent(log types.Log) (*MainWithdrawEvent, error) {
	event := new(MainWithdrawEvent)
	if err := _Main.contract.UnpackLog(event, "WithdrawEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
