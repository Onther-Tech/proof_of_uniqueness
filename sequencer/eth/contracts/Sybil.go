// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package Sybil

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// SybilMetaData contains all meta data concerning the Sybil contract.
var SybilMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"AmountExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BatchTimeoutExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EthTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InternalTxNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCreateAccountTransaction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDepositTransaction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidForceExitTransaction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidForceExplodeTransaction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"elementType\",\"type\":\"string\"}],\"name\":\"InvalidPoseidonAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTransactionParameters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVerifierAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LoadAmountDoesNotMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LoadAmountExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SmtProofInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawAlreadyDone\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"batchNum\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"l1UserTxsLen\",\"type\":\"uint16\"}],\"name\":\"ForgeBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"forgeL1BatchTimeout\",\"type\":\"uint8\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"queueIndex\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"position\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"l1UserTx\",\"type\":\"bytes\"}],\"name\":\"L1UserTxEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint48\",\"name\":\"idx\",\"type\":\"uint48\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"numExitRoot\",\"type\":\"uint32\"}],\"name\":\"WithdrawEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ABSOLUTE_MAX_L1BATCHTIMEOUT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethAddress\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"fromIdx\",\"type\":\"uint48\"},{\"internalType\":\"uint40\",\"name\":\"loadAmountF\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"amountF\",\"type\":\"uint40\"},{\"internalType\":\"uint48\",\"name\":\"toIdx\",\"type\":\"uint48\"}],\"name\":\"_addTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"_hashFinalNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"}],\"name\":\"_hashNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"accountRootMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createAccount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentFillingBatch\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"fromIdx\",\"type\":\"uint48\"},{\"internalType\":\"uint40\",\"name\":\"loadAmountF\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"amountF\",\"type\":\"uint40\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"fromIdx\",\"type\":\"uint48\"},{\"internalType\":\"uint40\",\"name\":\"loadAmountF\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"amountF\",\"type\":\"uint40\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"name\":\"exitNullifierMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"exitRootMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"fromIdx\",\"type\":\"uint48\"},{\"internalType\":\"uint40\",\"name\":\"loadAmountF\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"amountF\",\"type\":\"uint40\"}],\"name\":\"explode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"newLastIdx\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"newAccountRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newVouchRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newScoreRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newExitRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"verifierIdx\",\"type\":\"uint8\"},{\"internalType\":\"uint256[2]\",\"name\":\"proofA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"proofB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"proofC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"}],\"name\":\"forgeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"queueIndex\",\"type\":\"uint32\"}],\"name\":\"getL1TransactionQueue\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastForgedBatch\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQueueLength\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"batchNum\",\"type\":\"uint32\"}],\"name\":\"getStateRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"verifiers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxTxs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nLevels\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"_forgeL1BatchTimeout\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_poseidon2Elements\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poseidon3Elements\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poseidon4Elements\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastForgedBatch\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastIdx\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rollupVerifiers\",\"outputs\":[{\"internalType\":\"contractVerifierRollupInterface\",\"name\":\"verifierInterface\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTxs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nLevels\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"scoreRootMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newTimeout\",\"type\":\"uint8\"}],\"name\":\"setForgeL1BatchTimeout\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"unprocessedBatchesMap\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"vouchRootMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"amount\",\"type\":\"uint192\"},{\"internalType\":\"uint32\",\"name\":\"numExitRoot\",\"type\":\"uint32\"},{\"internalType\":\"uint256[]\",\"name\":\"siblings\",\"type\":\"uint256[]\"},{\"internalType\":\"uint48\",\"name\":\"idx\",\"type\":\"uint48\"}],\"name\":\"withdrawMerkleProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f80fd5b506137478061001d5f395ff3fe6080604052600436106101c1575f3560e01c80639a18b70a116100f6578063bd8a4a6111610094578063d486645c11610063578063d486645c1461061b578063ef8140b514610645578063f2fde38b14610681578063f84f92ee146106a9576101c1565b8063bd8a4a6114610551578063c021501b1461058d578063c0b55ae4146105b5578063c25d5789146105f1576101c1565b8063adacd33b116100d0578063adacd33b14610473578063b8f77005146104af578063ba2506df146104d9578063bbe5a37514610515576101c1565b80639a18b70a146104115780639dca362f1461042d578063a5e2ec5b14610437576101c1565b806344e0b2ce11610163578063715018a61161013d578063715018a614610379578063795c61671461038f5780638da5cb5b146103cb5780638f31e7e9146103f5576101c1565b806344e0b2ce1461030b578063519c7a311461033557806362332ee214610351576101c1565b80632f463f591161019f5780632f463f591461023f5780633009c59f1461026757806338330200146102a3578063416ec89e146102e1576101c1565b8063089d8e7a146101c55780630f1c7003146101ed5780631b78164b14610215575b5f80fd5b3480156101d0575f80fd5b506101eb60048036038101906101e69190612065565b6106e5565b005b3480156101f8575f80fd5b50610213600480360381019061020e91906123a5565b610989565b005b348015610220575f80fd5b50610229610b9b565b60405161023691906124b4565b60405180910390f35b34801561024a575f80fd5b5061026560048036038101906102609190612507565b610bb4565b005b348015610272575f80fd5b5061028d600480360381019061028891906125a8565b610d65565b60405161029a91906125e2565b60405180910390f35b3480156102ae575f80fd5b506102c960048036038101906102c491906125fb565b610d8b565b6040516102d893929190612681565b60405180910390f35b3480156102ec575f80fd5b506102f5610ddf565b60405161030291906126c5565b60405180910390f35b348015610316575f80fd5b5061031f610de4565b60405161032c91906124b4565b60405180910390f35b61034f600480360381019061034a91906126de565b610dfa565b005b34801561035c575f80fd5b50610377600480360381019061037291906127d4565b610e0d565b005b348015610384575f80fd5b5061038d610fb4565b005b34801561039a575f80fd5b506103b560048036038101906103b091906125a8565b610fc7565b6040516103c291906125e2565b60405180910390f35b3480156103d6575f80fd5b506103df610fdc565b6040516103ec9190612867565b60405180910390f35b61040f600480360381019061040a91906126de565b611011565b005b61042b600480360381019061042691906126de565b611024565b005b610435611036565b005b348015610442575f80fd5b5061045d600480360381019061045891906125a8565b611045565b60405161046a91906125e2565b60405180910390f35b34801561047e575f80fd5b50610499600480360381019061049491906125a8565b61105a565b6040516104a691906125e2565b60405180910390f35b3480156104ba575f80fd5b506104c361106f565b6040516104d091906124b4565b60405180910390f35b3480156104e4575f80fd5b506104ff60048036038101906104fa91906125a8565b6110a4565b60405161050c91906128fa565b60405180910390f35b348015610520575f80fd5b5061053b6004803603810190610536919061291a565b611151565b60405161054891906125e2565b60405180910390f35b34801561055c575f80fd5b50610577600480360381019061057291906125a8565b6111c6565b60405161058491906125e2565b60405180910390f35b348015610598575f80fd5b506105b360048036038101906105ae9190612958565b6111db565b005b3480156105c0575f80fd5b506105db60048036038101906105d6919061291a565b61121f565b6040516105e891906125e2565b60405180910390f35b3480156105fc575f80fd5b50610605611275565b60405161061291906124b4565b60405180910390f35b348015610626575f80fd5b5061062f61128a565b60405161063c9190612992565b60405180910390f35b348015610650575f80fd5b5061066b600480360381019061066691906125a8565b6112a2565b60405161067891906128fa565b60405180910390f35b34801561068c575f80fd5b506106a760048036038101906106a291906129ab565b61133d565b005b3480156106b4575f80fd5b506106cf60048036038101906106ca91906129d6565b6113c1565b6040516106dc9190612a2e565b60405180910390f35b600a8560ff16815481106106fc576106fb612a47565b5b905f5260205f2090600302015f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166343753b4d8585856040518060200160405280878152506040518563ffffffff1660e01b81526004016107769493929190612bea565b602060405180830381865afa158015610791573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107b59190612c59565b6107eb576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002601a81819054906101000a900463ffffffff168092919061080d90612cb1565b91906101000a81548163ffffffff021916908363ffffffff1602179055505089600260146101000a81548165ffffffffffff021916908365ffffffffffff1602179055508860045f6002601a9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020015f20819055508760055f6002601a9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020015f20819055508660065f6002601a9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020015f20819055508560075f6002601a9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020015f20819055505f61092a6113eb565b90506002601a9054906101000a900463ffffffff1663ffffffff167fe00040c8a3b0bf905636c26924e90520eafc5003324138236fddee2d34588618826040516109749190612cf8565b60405180910390a25050505050505050505050565b5f6109926114fb565b90505f815f0160089054906101000a900460ff161590505f825f015f9054906101000a900467ffffffffffffffff1690505f808267ffffffffffffffff161480156109da5750825b90505f60018367ffffffffffffffff16148015610a0d57505f3073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610a1b575080155b15610a52576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001855f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315610a9f576001855f0160086101000a81548160ff0219169083151502179055505b60ff600260146101000a81548165ffffffffffff021916908365ffffffffffff160217905550600160035f6101000a81548163ffffffff021916908363ffffffff160217905550610af18c8c8c611522565b610afc8888886116c3565b7fd2b214d5e2d2f958eb3b30690fa010715ebfdb9438837a496031fd1d0462e59389604051610b2b91906126c5565b60405180910390a18315610b8d575f855f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26001604051610b849190612d5d565b60405180910390a15b505050505050505050505050565b5f6002601a9054906101000a900463ffffffff16905090565b5f8585858585604051602001610bce959493929190612e23565b60405160208183030381529060405290505f608060085f60035f9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020015f208054610c1b90612eae565b9050610c279190612f0b565b905060085f60035f9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020015f2082604051602001610c69929190613007565b60405160208183030381529060405260085f60035f9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020015f209081610cb291906131ac565b508060ff1660035f9054906101000a900463ffffffff1663ffffffff167fdd5c7c5ea02d3c5d1621513faa6de53d474ee6f111eda6352a63e3dfe8c4011984604051610cfe91906128fa565b60405180910390a36103e8600182610d16919061327b565b10610d5c5760035f81819054906101000a900463ffffffff1680929190610d3c90612cb1565b91906101000a81548163ffffffff021916908363ffffffff160217905550505b50505050505050565b5f60045f8363ffffffff1663ffffffff1681526020019081526020015f20549050919050565b600a8181548110610d9a575f80fd5b905f5260205f2090600302015f91509050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b60f081565b6002601a9054906101000a900463ffffffff1681565b610e08338484846001610bb4565b505050565b5f610e1886336118d1565b90505f610e2482611992565b90505f60075f8863ffffffff1663ffffffff1681526020019081526020015f2054905060095f8863ffffffff1663ffffffff1681526020019081526020015f205f8565ffffffffffff1665ffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615610ec7576040517f14f640f800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610edc8187878765ffffffffffff1686611a33565b610f11576040517efc0aaa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160095f8963ffffffff1663ffffffff1681526020019081526020015f205f8665ffffffffffff1665ffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550610f6e88611ace565b8663ffffffff168465ffffffffffff167f102db758451b2f65238246a452d00c0c4c8f59d8c623aff254111079418e57ec60405160405180910390a35050505050505050565b610fbc611af4565b610fc55f611b7b565b565b6004602052805f5260405f205f915090505481565b5f80610fe6611c4c565b9050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b61101f338484846002610bb4565b505050565b611031338484845f610bb4565b505050565b611043335f805f80610bb4565b565b6007602052805f5260405f205f915090505481565b6005602052805f5260405f205f915090505481565b5f6002601a9054906101000a900463ffffffff1660035f9054906101000a900463ffffffff1661109f91906132ae565b905090565b606060085f8363ffffffff1663ffffffff1681526020019081526020015f2080546110ce90612eae565b80601f01602080910402602001604051908101604052809291908181526020018280546110fa90612eae565b80156111455780601f1061111c57610100808354040283529160200191611145565b820191905f5260205f20905b81548152906001019060200180831161112857829003601f168201915b50505050509050919050565b5f61115a611eac565b83815f6003811061116e5761116d612a47565b5b602002018181525050828160016003811061118c5761118b612a47565b5b6020020181815250506001816002600381106111ab576111aa612a47565b5b6020020181815250506111bd81611c73565b91505092915050565b6006602052805f5260405f205f915090505481565b60f060ff168160ff16111561121c576040517fc043ba9500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b5f611228611ece565b83815f6002811061123c5761123b612a47565b5b602002018181525050828160016002811061125a57611259612a47565b5b60200201818152505061126c81611d14565b91505092915050565b60035f9054906101000a900463ffffffff1681565b600260149054906101000a900465ffffffffffff1681565b6008602052805f5260405f205f9150905080546112be90612eae565b80601f01602080910402602001604051908101604052809291908181526020018280546112ea90612eae565b80156113355780601f1061130c57610100808354040283529160200191611335565b820191905f5260205f20905b81548152906001019060200180831161131857829003601f168201915b505050505081565b611345611af4565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036113b5575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016113ac9190612867565b60405180910390fd5b6113be81611b7b565b50565b6009602052815f5260405f20602052805f5260405f205f915091509054906101000a900460ff1681565b5f80608060085f6002601a9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020015f20805461142990612eae565b90506114359190612f0b565b905060085f6002601a9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020015f205f6114719190611ef0565b60035f9054906101000a900463ffffffff1663ffffffff1660016002601a9054906101000a900463ffffffff166114a891906132e5565b63ffffffff16036114f45760035f81819054906101000a900463ffffffff16809291906114d490612cb1565b91906101000a81548163ffffffff021916908363ffffffff160217905550505b8091505090565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b5f835190505f5b818110156116bc575f73ffffffffffffffffffffffffffffffffffffffff1685828151811061155b5761155a612a47565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16036115b0576040517f10c40e8c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a60405180606001604052808784815181106115d0576115cf612a47565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16815260200186848151811061160657611605612a47565b5b6020026020010151815260200185848151811061162657611625612a47565b5b6020026020010151815250908060018154018082558091505060019003905f5260205f2090600302015f909190919091505f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201555050806001019050611529565b5050505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611731576040517f30a7c7ea00000000000000000000000000000000000000000000000000000000815260040161172890613376565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361179f576040517f30a7c7ea000000000000000000000000000000000000000000000000000000008152600401611796906133de565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361180d576040517f30a7c7ea00000000000000000000000000000000000000000000000000000000815260040161180490613446565b60405180910390fd5b825f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6118d9611f2d565b6118e1611f2d565b8377ffffffffffffffffffffffffffffffffffffffffffffffff16815f6004811061190f5761190e612a47565b5b6020020181815250508273ffffffffffffffffffffffffffffffffffffffff168160016004811061194357611942612a47565b5b6020020181815250505f8160026004811061196157611960612a47565b5b6020020181815250505f8160036004811061197f5761197e612a47565b5b6020020181815250508091505092915050565b5f60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663248f6677836040518263ffffffff1660e01b81526004016119ed91906134e3565b602060405180830381865afa158015611a08573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a2c9190613510565b9050919050565b5f80611a3f8484611151565b90505f80600188889050611a539190613544565b90505b5f8112611abd57878782818110611a7057611a6f612a47565b5b9050602002013591505f6001808389901c1660ff1614905080611a9c57611a97848461121f565b611aa7565b611aa6838561121f565b5b9350508080611ab590613584565b915050611a56565b508188149250505095945050505050565b611af18177ffffffffffffffffffffffffffffffffffffffffffffffff16611db4565b50565b611afc611ea5565b73ffffffffffffffffffffffffffffffffffffffff16611b1a610fdc565b73ffffffffffffffffffffffffffffffffffffffff1614611b7957611b3d611ea5565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611b709190612867565b60405180910390fd5b565b5f611b84611c4c565b90505f815f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082825f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b5f7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166325cc70e8836040518263ffffffff1660e01b8152600401611cce919061364a565b602060405180830381865afa158015611ce9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d0d9190613510565b9050919050565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166329a5f2f6836040518263ffffffff1660e01b8152600401611d6e91906136e2565b602060405180830381865afa158015611d89573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611dad9190613510565b9050919050565b5f3373ffffffffffffffffffffffffffffffffffffffff16825f67ffffffffffffffff811115611de757611de6612153565b5b6040519080825280601f01601f191660200182016040528015611e195781602001600182028036833780820191505090505b50604051611e2791906136fb565b5f6040518083038185875af1925050503d805f8114611e61576040519150601f19603f3d011682016040523d82523d5f602084013e611e66565b606091505b5050905080611ea1576040517f6d963f8800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b5f33905090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b508054611efc90612eae565b5f825580601f10611f0d5750611f2a565b601f0160209004905f5260205f2090810190611f299190611f4f565b5b50565b6040518060800160405280600490602082028036833780820191505090505090565b5b80821115611f66575f815f905550600101611f50565b5090565b5f604051905090565b5f80fd5b5f80fd5b5f65ffffffffffff82169050919050565b611f9581611f7b565b8114611f9f575f80fd5b50565b5f81359050611fb081611f8c565b92915050565b5f819050919050565b611fc881611fb6565b8114611fd2575f80fd5b50565b5f81359050611fe381611fbf565b92915050565b5f60ff82169050919050565b611ffe81611fe9565b8114612008575f80fd5b50565b5f8135905061201981611ff5565b92915050565b5f80fd5b5f8190508260206002028201111561203e5761203d61201f565b5b92915050565b5f8190508260406002028201111561205f5761205e61201f565b5b92915050565b5f805f805f805f805f806101e08b8d03121561208457612083611f73565b5b5f6120918d828e01611fa2565b9a505060206120a28d828e01611fd5565b99505060406120b38d828e01611fd5565b98505060606120c48d828e01611fd5565b97505060806120d58d828e01611fd5565b96505060a06120e68d828e0161200b565b95505060c06120f78d828e01612023565b9450506101006121098d828e01612044565b93505061018061211b8d828e01612023565b9250506101c061212d8d828e01611fd5565b9150509295989b9194979a5092959850565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61218982612143565b810181811067ffffffffffffffff821117156121a8576121a7612153565b5b80604052505050565b5f6121ba611f6a565b90506121c68282612180565b919050565b5f67ffffffffffffffff8211156121e5576121e4612153565b5b602082029050602081019050919050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61221f826121f6565b9050919050565b61222f81612215565b8114612239575f80fd5b50565b5f8135905061224a81612226565b92915050565b5f61226261225d846121cb565b6121b1565b905080838252602082019050602084028301858111156122855761228461201f565b5b835b818110156122ae578061229a888261223c565b845260208401935050602081019050612287565b5050509392505050565b5f82601f8301126122cc576122cb61213f565b5b81356122dc848260208601612250565b91505092915050565b5f67ffffffffffffffff8211156122ff576122fe612153565b5b602082029050602081019050919050565b5f61232261231d846122e5565b6121b1565b905080838252602082019050602084028301858111156123455761234461201f565b5b835b8181101561236e578061235a8882611fd5565b845260208401935050602081019050612347565b5050509392505050565b5f82601f83011261238c5761238b61213f565b5b813561239c848260208601612310565b91505092915050565b5f805f805f805f60e0888a0312156123c0576123bf611f73565b5b5f88013567ffffffffffffffff8111156123dd576123dc611f77565b5b6123e98a828b016122b8565b975050602088013567ffffffffffffffff81111561240a57612409611f77565b5b6124168a828b01612378565b965050604088013567ffffffffffffffff81111561243757612436611f77565b5b6124438a828b01612378565b95505060606124548a828b0161200b565b94505060806124658a828b0161223c565b93505060a06124768a828b0161223c565b92505060c06124878a828b0161223c565b91505092959891949750929550565b5f63ffffffff82169050919050565b6124ae81612496565b82525050565b5f6020820190506124c75f8301846124a5565b92915050565b5f64ffffffffff82169050919050565b6124e6816124cd565b81146124f0575f80fd5b50565b5f81359050612501816124dd565b92915050565b5f805f805f60a086880312156125205761251f611f73565b5b5f61252d8882890161223c565b955050602061253e88828901611fa2565b945050604061254f888289016124f3565b9350506060612560888289016124f3565b925050608061257188828901611fa2565b9150509295509295909350565b61258781612496565b8114612591575f80fd5b50565b5f813590506125a28161257e565b92915050565b5f602082840312156125bd576125bc611f73565b5b5f6125ca84828501612594565b91505092915050565b6125dc81611fb6565b82525050565b5f6020820190506125f55f8301846125d3565b92915050565b5f602082840312156126105761260f611f73565b5b5f61261d84828501611fd5565b91505092915050565b5f819050919050565b5f61264961264461263f846121f6565b612626565b6121f6565b9050919050565b5f61265a8261262f565b9050919050565b5f61266b82612650565b9050919050565b61267b81612661565b82525050565b5f6060820190506126945f830186612672565b6126a160208301856125d3565b6126ae60408301846125d3565b949350505050565b6126bf81611fe9565b82525050565b5f6020820190506126d85f8301846126b6565b92915050565b5f805f606084860312156126f5576126f4611f73565b5b5f61270286828701611fa2565b9350506020612713868287016124f3565b9250506040612724868287016124f3565b9150509250925092565b5f77ffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b61275a8161272e565b8114612764575f80fd5b50565b5f8135905061277581612751565b92915050565b5f80fd5b5f8083601f8401126127945761279361213f565b5b8235905067ffffffffffffffff8111156127b1576127b061277b565b5b6020830191508360208202830111156127cd576127cc61201f565b5b9250929050565b5f805f805f608086880312156127ed576127ec611f73565b5b5f6127fa88828901612767565b955050602061280b88828901612594565b945050604086013567ffffffffffffffff81111561282c5761282b611f77565b5b6128388882890161277f565b9350935050606061284b88828901611fa2565b9150509295509295909350565b61286181612215565b82525050565b5f60208201905061287a5f830184612858565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156128b757808201518184015260208101905061289c565b5f8484015250505050565b5f6128cc82612880565b6128d6818561288a565b93506128e681856020860161289a565b6128ef81612143565b840191505092915050565b5f6020820190508181035f83015261291281846128c2565b905092915050565b5f80604083850312156129305761292f611f73565b5b5f61293d85828601611fd5565b925050602061294e85828601611fd5565b9150509250929050565b5f6020828403121561296d5761296c611f73565b5b5f61297a8482850161200b565b91505092915050565b61298c81611f7b565b82525050565b5f6020820190506129a55f830184612983565b92915050565b5f602082840312156129c0576129bf611f73565b5b5f6129cd8482850161223c565b91505092915050565b5f80604083850312156129ec576129eb611f73565b5b5f6129f985828601612594565b9250506020612a0a85828601611fa2565b9150509250929050565b5f8115159050919050565b612a2881612a14565b82525050565b5f602082019050612a415f830184612a1f565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b82818337505050565b612a8960408383612a74565b5050565b5f60029050919050565b5f81905092915050565b5f819050919050565b612ab660408383612a74565b5050565b5f612ac58383612aaa565b60408301905092915050565b5f82905092915050565b5f604082019050919050565b612af081612a8d565b612afa8184612a97565b9250612b0582612aa1565b805f5b83811015612b3d57612b1a8284612ad1565b612b248782612aba565b9650612b2f83612adb565b925050600181019050612b08565b505050505050565b5f60019050919050565b5f81905092915050565b5f819050919050565b612b6b81611fb6565b82525050565b5f612b7c8383612b62565b60208301905092915050565b5f602082019050919050565b612b9d81612b45565b612ba78184612b4f565b9250612bb282612b59565b805f5b83811015612be2578151612bc98782612b71565b9650612bd483612b88565b925050600181019050612bb5565b505050505050565b5f61012082019050612bfe5f830187612a7d565b612c0b6040830186612ae7565b612c1860c0830185612a7d565b612c26610100830184612b94565b95945050505050565b612c3881612a14565b8114612c42575f80fd5b50565b5f81519050612c5381612c2f565b92915050565b5f60208284031215612c6e57612c6d611f73565b5b5f612c7b84828501612c45565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f612cbb82612496565b915063ffffffff8203612cd157612cd0612c84565b5b600182019050919050565b5f61ffff82169050919050565b612cf281612cdc565b82525050565b5f602082019050612d0b5f830184612ce9565b92915050565b5f819050919050565b5f67ffffffffffffffff82169050919050565b5f612d47612d42612d3d84612d11565b612626565b612d1a565b9050919050565b612d5781612d2d565b82525050565b5f602082019050612d705f830184612d4e565b92915050565b5f8160601b9050919050565b5f612d8c82612d76565b9050919050565b5f612d9d82612d82565b9050919050565b612db5612db082612215565b612d93565b82525050565b5f8160d01b9050919050565b5f612dd182612dbb565b9050919050565b612de9612de482611f7b565b612dc7565b82525050565b5f8160d81b9050919050565b5f612e0582612def565b9050919050565b612e1d612e18826124cd565b612dfb565b82525050565b5f612e2e8288612da4565b601482019150612e3e8287612dd8565b600682019150612e4e8286612e0c565b600582019150612e5e8285612e0c565b600582019150612e6e8284612dd8565b6006820191508190509695505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680612ec557607f821691505b602082108103612ed857612ed7612e81565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f612f1582611fb6565b9150612f2083611fb6565b925082612f3057612f2f612ede565b5b828204905092915050565b5f81905092915050565b5f819050815f5260205f209050919050565b5f8154612f6381612eae565b612f6d8186612f3b565b9450600182165f8114612f875760018114612f9c57612fce565b60ff1983168652811515820286019350612fce565b612fa585612f45565b5f5b83811015612fc657815481890152600182019150602081019050612fa7565b838801955050505b50505092915050565b5f612fe182612880565b612feb8185612f3b565b9350612ffb81856020860161289a565b80840191505092915050565b5f6130128285612f57565b915061301e8284612fd7565b91508190509392505050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026130747fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613039565b61307e8683613039565b95508019841693508086168417925050509392505050565b5f6130b06130ab6130a684611fb6565b612626565b611fb6565b9050919050565b5f819050919050565b6130c983613096565b6130dd6130d5826130b7565b848454613045565b825550505050565b5f90565b6130f16130e5565b6130fc8184846130c0565b505050565b5b8181101561311f576131145f826130e9565b600181019050613102565b5050565b601f8211156131645761313581612f45565b61313e8461302a565b8101602085101561314d578190505b6131616131598561302a565b830182613101565b50505b505050565b5f82821c905092915050565b5f6131845f1984600802613169565b1980831691505092915050565b5f61319c8383613175565b9150826002028217905092915050565b6131b582612880565b67ffffffffffffffff8111156131ce576131cd612153565b5b6131d88254612eae565b6131e3828285613123565b5f60209050601f831160018114613214575f8415613202578287015190505b61320c8582613191565b865550613273565b601f19841661322286612f45565b5f5b8281101561324957848901518255600182019150602085019450602081019050613224565b868310156132665784890151613262601f891682613175565b8355505b6001600288020188555050505b505050505050565b5f61328582611fb6565b915061329083611fb6565b92508282019050808211156132a8576132a7612c84565b5b92915050565b5f6132b882612496565b91506132c383612496565b9250828203905063ffffffff8111156132df576132de612c84565b5b92915050565b5f6132ef82612496565b91506132fa83612496565b9250828201905063ffffffff81111561331657613315612c84565b5b92915050565b5f82825260208201905092915050565b7f706f736569646f6e32456c656d656e74730000000000000000000000000000005f82015250565b5f61336060118361331c565b915061336b8261332c565b602082019050919050565b5f6020820190508181035f83015261338d81613354565b9050919050565b7f706f736569646f6e33456c656d656e74730000000000000000000000000000005f82015250565b5f6133c860118361331c565b91506133d382613394565b602082019050919050565b5f6020820190508181035f8301526133f5816133bc565b9050919050565b7f706f736569646f6e34456c656d656e74730000000000000000000000000000005f82015250565b5f61343060118361331c565b915061343b826133fc565b602082019050919050565b5f6020820190508181035f83015261345d81613424565b9050919050565b5f60049050919050565b5f81905092915050565b5f819050919050565b5f602082019050919050565b61349681613464565b6134a0818461346e565b92506134ab82613478565b805f5b838110156134db5781516134c28782612b71565b96506134cd83613481565b9250506001810190506134ae565b505050505050565b5f6080820190506134f65f83018461348d565b92915050565b5f8151905061350a81611fbf565b92915050565b5f6020828403121561352557613524611f73565b5b5f613532848285016134fc565b91505092915050565b5f819050919050565b5f61354e8261353b565b91506135598361353b565b925082820390508181125f8412168282135f85121516171561357e5761357d612c84565b5b92915050565b5f61358e8261353b565b91507f800000000000000000000000000000000000000000000000000000000000000082036135c0576135bf612c84565b5b600182039050919050565b5f60039050919050565b5f81905092915050565b5f819050919050565b5f602082019050919050565b6135fd816135cb565b61360781846135d5565b9250613612826135df565b805f5b838110156136425781516136298782612b71565b9650613634836135e8565b925050600181019050613615565b505050505050565b5f60608201905061365d5f8301846135f4565b92915050565b5f60029050919050565b5f81905092915050565b5f819050919050565b5f602082019050919050565b61369581613663565b61369f818461366d565b92506136aa82613677565b805f5b838110156136da5781516136c18782612b71565b96506136cc83613680565b9250506001810190506136ad565b505050505050565b5f6040820190506136f55f83018461368c565b92915050565b5f6137068284612fd7565b91508190509291505056fea264697066735822122089fe126c2ce661b827ef6f1e089c74e68974217c097ad2a4ed53d2ed818d34b264736f6c63430008170033",
}

// SybilABI is the input ABI used to generate the binding from.
// Deprecated: Use SybilMetaData.ABI instead.
var SybilABI = SybilMetaData.ABI

// SybilBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SybilMetaData.Bin instead.
var SybilBin = SybilMetaData.Bin

// DeploySybil deploys a new Ethereum contract, binding an instance of Sybil to it.
func DeploySybil(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Sybil, error) {
	parsed, err := SybilMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SybilBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Sybil{SybilCaller: SybilCaller{contract: contract}, SybilTransactor: SybilTransactor{contract: contract}, SybilFilterer: SybilFilterer{contract: contract}}, nil
}

// Sybil is an auto generated Go binding around an Ethereum contract.
type Sybil struct {
	SybilCaller     // Read-only binding to the contract
	SybilTransactor // Write-only binding to the contract
	SybilFilterer   // Log filterer for contract events
}

// SybilCaller is an auto generated read-only Go binding around an Ethereum contract.
type SybilCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SybilTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SybilTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SybilFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SybilFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SybilSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SybilSession struct {
	Contract     *Sybil            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SybilCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SybilCallerSession struct {
	Contract *SybilCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SybilTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SybilTransactorSession struct {
	Contract     *SybilTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SybilRaw is an auto generated low-level Go binding around an Ethereum contract.
type SybilRaw struct {
	Contract *Sybil // Generic contract binding to access the raw methods on
}

// SybilCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SybilCallerRaw struct {
	Contract *SybilCaller // Generic read-only contract binding to access the raw methods on
}

// SybilTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SybilTransactorRaw struct {
	Contract *SybilTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSybil creates a new instance of Sybil, bound to a specific deployed contract.
func NewSybil(address common.Address, backend bind.ContractBackend) (*Sybil, error) {
	contract, err := bindSybil(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Sybil{SybilCaller: SybilCaller{contract: contract}, SybilTransactor: SybilTransactor{contract: contract}, SybilFilterer: SybilFilterer{contract: contract}}, nil
}

// NewSybilCaller creates a new read-only instance of Sybil, bound to a specific deployed contract.
func NewSybilCaller(address common.Address, caller bind.ContractCaller) (*SybilCaller, error) {
	contract, err := bindSybil(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SybilCaller{contract: contract}, nil
}

// NewSybilTransactor creates a new write-only instance of Sybil, bound to a specific deployed contract.
func NewSybilTransactor(address common.Address, transactor bind.ContractTransactor) (*SybilTransactor, error) {
	contract, err := bindSybil(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SybilTransactor{contract: contract}, nil
}

// NewSybilFilterer creates a new log filterer instance of Sybil, bound to a specific deployed contract.
func NewSybilFilterer(address common.Address, filterer bind.ContractFilterer) (*SybilFilterer, error) {
	contract, err := bindSybil(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SybilFilterer{contract: contract}, nil
}

// bindSybil binds a generic wrapper to an already deployed contract.
func bindSybil(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SybilMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Sybil *SybilRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Sybil.Contract.SybilCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Sybil *SybilRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Sybil.Contract.SybilTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Sybil *SybilRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Sybil.Contract.SybilTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Sybil *SybilCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Sybil.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Sybil *SybilTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Sybil.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Sybil *SybilTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Sybil.Contract.contract.Transact(opts, method, params...)
}

// ABSOLUTEMAXL1BATCHTIMEOUT is a free data retrieval call binding the contract method 0x416ec89e.
//
// Solidity: function ABSOLUTE_MAX_L1BATCHTIMEOUT() view returns(uint8)
func (_Sybil *SybilCaller) ABSOLUTEMAXL1BATCHTIMEOUT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Sybil.contract.Call(opts, &out, "ABSOLUTE_MAX_L1BATCHTIMEOUT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ABSOLUTEMAXL1BATCHTIMEOUT is a free data retrieval call binding the contract method 0x416ec89e.
//
// Solidity: function ABSOLUTE_MAX_L1BATCHTIMEOUT() view returns(uint8)
func (_Sybil *SybilSession) ABSOLUTEMAXL1BATCHTIMEOUT() (uint8, error) {
	return _Sybil.Contract.ABSOLUTEMAXL1BATCHTIMEOUT(&_Sybil.CallOpts)
}

// ABSOLUTEMAXL1BATCHTIMEOUT is a free data retrieval call binding the contract method 0x416ec89e.
//
// Solidity: function ABSOLUTE_MAX_L1BATCHTIMEOUT() view returns(uint8)
func (_Sybil *SybilCallerSession) ABSOLUTEMAXL1BATCHTIMEOUT() (uint8, error) {
	return _Sybil.Contract.ABSOLUTEMAXL1BATCHTIMEOUT(&_Sybil.CallOpts)
}

// HashFinalNode is a free data retrieval call binding the contract method 0xbbe5a375.
//
// Solidity: function _hashFinalNode(uint256 key, uint256 value) view returns(uint256)
func (_Sybil *SybilCaller) HashFinalNode(opts *bind.CallOpts, key *big.Int, value *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Sybil.contract.Call(opts, &out, "_hashFinalNode", key, value)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// HashFinalNode is a free data retrieval call binding the contract method 0xbbe5a375.
//
// Solidity: function _hashFinalNode(uint256 key, uint256 value) view returns(uint256)
func (_Sybil *SybilSession) HashFinalNode(key *big.Int, value *big.Int) (*big.Int, error) {
	return _Sybil.Contract.HashFinalNode(&_Sybil.CallOpts, key, value)
}

// HashFinalNode is a free data retrieval call binding the contract method 0xbbe5a375.
//
// Solidity: function _hashFinalNode(uint256 key, uint256 value) view returns(uint256)
func (_Sybil *SybilCallerSession) HashFinalNode(key *big.Int, value *big.Int) (*big.Int, error) {
	return _Sybil.Contract.HashFinalNode(&_Sybil.CallOpts, key, value)
}

// HashNode is a free data retrieval call binding the contract method 0xc0b55ae4.
//
// Solidity: function _hashNode(uint256 left, uint256 right) view returns(uint256)
func (_Sybil *SybilCaller) HashNode(opts *bind.CallOpts, left *big.Int, right *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Sybil.contract.Call(opts, &out, "_hashNode", left, right)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// HashNode is a free data retrieval call binding the contract method 0xc0b55ae4.
//
// Solidity: function _hashNode(uint256 left, uint256 right) view returns(uint256)
func (_Sybil *SybilSession) HashNode(left *big.Int, right *big.Int) (*big.Int, error) {
	return _Sybil.Contract.HashNode(&_Sybil.CallOpts, left, right)
}

// HashNode is a free data retrieval call binding the contract method 0xc0b55ae4.
//
// Solidity: function _hashNode(uint256 left, uint256 right) view returns(uint256)
func (_Sybil *SybilCallerSession) HashNode(left *big.Int, right *big.Int) (*big.Int, error) {
	return _Sybil.Contract.HashNode(&_Sybil.CallOpts, left, right)
}

// AccountRootMap is a free data retrieval call binding the contract method 0x795c6167.
//
// Solidity: function accountRootMap(uint32 ) view returns(uint256)
func (_Sybil *SybilCaller) AccountRootMap(opts *bind.CallOpts, arg0 uint32) (*big.Int, error) {
	var out []interface{}
	err := _Sybil.contract.Call(opts, &out, "accountRootMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AccountRootMap is a free data retrieval call binding the contract method 0x795c6167.
//
// Solidity: function accountRootMap(uint32 ) view returns(uint256)
func (_Sybil *SybilSession) AccountRootMap(arg0 uint32) (*big.Int, error) {
	return _Sybil.Contract.AccountRootMap(&_Sybil.CallOpts, arg0)
}

// AccountRootMap is a free data retrieval call binding the contract method 0x795c6167.
//
// Solidity: function accountRootMap(uint32 ) view returns(uint256)
func (_Sybil *SybilCallerSession) AccountRootMap(arg0 uint32) (*big.Int, error) {
	return _Sybil.Contract.AccountRootMap(&_Sybil.CallOpts, arg0)
}

// CurrentFillingBatch is a free data retrieval call binding the contract method 0xc25d5789.
//
// Solidity: function currentFillingBatch() view returns(uint32)
func (_Sybil *SybilCaller) CurrentFillingBatch(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Sybil.contract.Call(opts, &out, "currentFillingBatch")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// CurrentFillingBatch is a free data retrieval call binding the contract method 0xc25d5789.
//
// Solidity: function currentFillingBatch() view returns(uint32)
func (_Sybil *SybilSession) CurrentFillingBatch() (uint32, error) {
	return _Sybil.Contract.CurrentFillingBatch(&_Sybil.CallOpts)
}

// CurrentFillingBatch is a free data retrieval call binding the contract method 0xc25d5789.
//
// Solidity: function currentFillingBatch() view returns(uint32)
func (_Sybil *SybilCallerSession) CurrentFillingBatch() (uint32, error) {
	return _Sybil.Contract.CurrentFillingBatch(&_Sybil.CallOpts)
}

// ExitNullifierMap is a free data retrieval call binding the contract method 0xf84f92ee.
//
// Solidity: function exitNullifierMap(uint32 , uint48 ) view returns(bool)
func (_Sybil *SybilCaller) ExitNullifierMap(opts *bind.CallOpts, arg0 uint32, arg1 *big.Int) (bool, error) {
	var out []interface{}
	err := _Sybil.contract.Call(opts, &out, "exitNullifierMap", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ExitNullifierMap is a free data retrieval call binding the contract method 0xf84f92ee.
//
// Solidity: function exitNullifierMap(uint32 , uint48 ) view returns(bool)
func (_Sybil *SybilSession) ExitNullifierMap(arg0 uint32, arg1 *big.Int) (bool, error) {
	return _Sybil.Contract.ExitNullifierMap(&_Sybil.CallOpts, arg0, arg1)
}

// ExitNullifierMap is a free data retrieval call binding the contract method 0xf84f92ee.
//
// Solidity: function exitNullifierMap(uint32 , uint48 ) view returns(bool)
func (_Sybil *SybilCallerSession) ExitNullifierMap(arg0 uint32, arg1 *big.Int) (bool, error) {
	return _Sybil.Contract.ExitNullifierMap(&_Sybil.CallOpts, arg0, arg1)
}

// ExitRootMap is a free data retrieval call binding the contract method 0xa5e2ec5b.
//
// Solidity: function exitRootMap(uint32 ) view returns(uint256)
func (_Sybil *SybilCaller) ExitRootMap(opts *bind.CallOpts, arg0 uint32) (*big.Int, error) {
	var out []interface{}
	err := _Sybil.contract.Call(opts, &out, "exitRootMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ExitRootMap is a free data retrieval call binding the contract method 0xa5e2ec5b.
//
// Solidity: function exitRootMap(uint32 ) view returns(uint256)
func (_Sybil *SybilSession) ExitRootMap(arg0 uint32) (*big.Int, error) {
	return _Sybil.Contract.ExitRootMap(&_Sybil.CallOpts, arg0)
}

// ExitRootMap is a free data retrieval call binding the contract method 0xa5e2ec5b.
//
// Solidity: function exitRootMap(uint32 ) view returns(uint256)
func (_Sybil *SybilCallerSession) ExitRootMap(arg0 uint32) (*big.Int, error) {
	return _Sybil.Contract.ExitRootMap(&_Sybil.CallOpts, arg0)
}

// GetL1TransactionQueue is a free data retrieval call binding the contract method 0xba2506df.
//
// Solidity: function getL1TransactionQueue(uint32 queueIndex) view returns(bytes)
func (_Sybil *SybilCaller) GetL1TransactionQueue(opts *bind.CallOpts, queueIndex uint32) ([]byte, error) {
	var out []interface{}
	err := _Sybil.contract.Call(opts, &out, "getL1TransactionQueue", queueIndex)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetL1TransactionQueue is a free data retrieval call binding the contract method 0xba2506df.
//
// Solidity: function getL1TransactionQueue(uint32 queueIndex) view returns(bytes)
func (_Sybil *SybilSession) GetL1TransactionQueue(queueIndex uint32) ([]byte, error) {
	return _Sybil.Contract.GetL1TransactionQueue(&_Sybil.CallOpts, queueIndex)
}

// GetL1TransactionQueue is a free data retrieval call binding the contract method 0xba2506df.
//
// Solidity: function getL1TransactionQueue(uint32 queueIndex) view returns(bytes)
func (_Sybil *SybilCallerSession) GetL1TransactionQueue(queueIndex uint32) ([]byte, error) {
	return _Sybil.Contract.GetL1TransactionQueue(&_Sybil.CallOpts, queueIndex)
}

// GetLastForgedBatch is a free data retrieval call binding the contract method 0x1b78164b.
//
// Solidity: function getLastForgedBatch() view returns(uint32)
func (_Sybil *SybilCaller) GetLastForgedBatch(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Sybil.contract.Call(opts, &out, "getLastForgedBatch")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetLastForgedBatch is a free data retrieval call binding the contract method 0x1b78164b.
//
// Solidity: function getLastForgedBatch() view returns(uint32)
func (_Sybil *SybilSession) GetLastForgedBatch() (uint32, error) {
	return _Sybil.Contract.GetLastForgedBatch(&_Sybil.CallOpts)
}

// GetLastForgedBatch is a free data retrieval call binding the contract method 0x1b78164b.
//
// Solidity: function getLastForgedBatch() view returns(uint32)
func (_Sybil *SybilCallerSession) GetLastForgedBatch() (uint32, error) {
	return _Sybil.Contract.GetLastForgedBatch(&_Sybil.CallOpts)
}

// GetQueueLength is a free data retrieval call binding the contract method 0xb8f77005.
//
// Solidity: function getQueueLength() view returns(uint32)
func (_Sybil *SybilCaller) GetQueueLength(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Sybil.contract.Call(opts, &out, "getQueueLength")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetQueueLength is a free data retrieval call binding the contract method 0xb8f77005.
//
// Solidity: function getQueueLength() view returns(uint32)
func (_Sybil *SybilSession) GetQueueLength() (uint32, error) {
	return _Sybil.Contract.GetQueueLength(&_Sybil.CallOpts)
}

// GetQueueLength is a free data retrieval call binding the contract method 0xb8f77005.
//
// Solidity: function getQueueLength() view returns(uint32)
func (_Sybil *SybilCallerSession) GetQueueLength() (uint32, error) {
	return _Sybil.Contract.GetQueueLength(&_Sybil.CallOpts)
}

// GetStateRoot is a free data retrieval call binding the contract method 0x3009c59f.
//
// Solidity: function getStateRoot(uint32 batchNum) view returns(uint256)
func (_Sybil *SybilCaller) GetStateRoot(opts *bind.CallOpts, batchNum uint32) (*big.Int, error) {
	var out []interface{}
	err := _Sybil.contract.Call(opts, &out, "getStateRoot", batchNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStateRoot is a free data retrieval call binding the contract method 0x3009c59f.
//
// Solidity: function getStateRoot(uint32 batchNum) view returns(uint256)
func (_Sybil *SybilSession) GetStateRoot(batchNum uint32) (*big.Int, error) {
	return _Sybil.Contract.GetStateRoot(&_Sybil.CallOpts, batchNum)
}

// GetStateRoot is a free data retrieval call binding the contract method 0x3009c59f.
//
// Solidity: function getStateRoot(uint32 batchNum) view returns(uint256)
func (_Sybil *SybilCallerSession) GetStateRoot(batchNum uint32) (*big.Int, error) {
	return _Sybil.Contract.GetStateRoot(&_Sybil.CallOpts, batchNum)
}

// LastForgedBatch is a free data retrieval call binding the contract method 0x44e0b2ce.
//
// Solidity: function lastForgedBatch() view returns(uint32)
func (_Sybil *SybilCaller) LastForgedBatch(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Sybil.contract.Call(opts, &out, "lastForgedBatch")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// LastForgedBatch is a free data retrieval call binding the contract method 0x44e0b2ce.
//
// Solidity: function lastForgedBatch() view returns(uint32)
func (_Sybil *SybilSession) LastForgedBatch() (uint32, error) {
	return _Sybil.Contract.LastForgedBatch(&_Sybil.CallOpts)
}

// LastForgedBatch is a free data retrieval call binding the contract method 0x44e0b2ce.
//
// Solidity: function lastForgedBatch() view returns(uint32)
func (_Sybil *SybilCallerSession) LastForgedBatch() (uint32, error) {
	return _Sybil.Contract.LastForgedBatch(&_Sybil.CallOpts)
}

// LastIdx is a free data retrieval call binding the contract method 0xd486645c.
//
// Solidity: function lastIdx() view returns(uint48)
func (_Sybil *SybilCaller) LastIdx(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Sybil.contract.Call(opts, &out, "lastIdx")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastIdx is a free data retrieval call binding the contract method 0xd486645c.
//
// Solidity: function lastIdx() view returns(uint48)
func (_Sybil *SybilSession) LastIdx() (*big.Int, error) {
	return _Sybil.Contract.LastIdx(&_Sybil.CallOpts)
}

// LastIdx is a free data retrieval call binding the contract method 0xd486645c.
//
// Solidity: function lastIdx() view returns(uint48)
func (_Sybil *SybilCallerSession) LastIdx() (*big.Int, error) {
	return _Sybil.Contract.LastIdx(&_Sybil.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Sybil *SybilCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Sybil.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Sybil *SybilSession) Owner() (common.Address, error) {
	return _Sybil.Contract.Owner(&_Sybil.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Sybil *SybilCallerSession) Owner() (common.Address, error) {
	return _Sybil.Contract.Owner(&_Sybil.CallOpts)
}

// RollupVerifiers is a free data retrieval call binding the contract method 0x38330200.
//
// Solidity: function rollupVerifiers(uint256 ) view returns(address verifierInterface, uint256 maxTxs, uint256 nLevels)
func (_Sybil *SybilCaller) RollupVerifiers(opts *bind.CallOpts, arg0 *big.Int) (struct {
	VerifierInterface common.Address
	MaxTxs            *big.Int
	NLevels           *big.Int
}, error) {
	var out []interface{}
	err := _Sybil.contract.Call(opts, &out, "rollupVerifiers", arg0)

	outstruct := new(struct {
		VerifierInterface common.Address
		MaxTxs            *big.Int
		NLevels           *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.VerifierInterface = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.MaxTxs = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.NLevels = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// RollupVerifiers is a free data retrieval call binding the contract method 0x38330200.
//
// Solidity: function rollupVerifiers(uint256 ) view returns(address verifierInterface, uint256 maxTxs, uint256 nLevels)
func (_Sybil *SybilSession) RollupVerifiers(arg0 *big.Int) (struct {
	VerifierInterface common.Address
	MaxTxs            *big.Int
	NLevels           *big.Int
}, error) {
	return _Sybil.Contract.RollupVerifiers(&_Sybil.CallOpts, arg0)
}

// RollupVerifiers is a free data retrieval call binding the contract method 0x38330200.
//
// Solidity: function rollupVerifiers(uint256 ) view returns(address verifierInterface, uint256 maxTxs, uint256 nLevels)
func (_Sybil *SybilCallerSession) RollupVerifiers(arg0 *big.Int) (struct {
	VerifierInterface common.Address
	MaxTxs            *big.Int
	NLevels           *big.Int
}, error) {
	return _Sybil.Contract.RollupVerifiers(&_Sybil.CallOpts, arg0)
}

// ScoreRootMap is a free data retrieval call binding the contract method 0xbd8a4a61.
//
// Solidity: function scoreRootMap(uint32 ) view returns(uint256)
func (_Sybil *SybilCaller) ScoreRootMap(opts *bind.CallOpts, arg0 uint32) (*big.Int, error) {
	var out []interface{}
	err := _Sybil.contract.Call(opts, &out, "scoreRootMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScoreRootMap is a free data retrieval call binding the contract method 0xbd8a4a61.
//
// Solidity: function scoreRootMap(uint32 ) view returns(uint256)
func (_Sybil *SybilSession) ScoreRootMap(arg0 uint32) (*big.Int, error) {
	return _Sybil.Contract.ScoreRootMap(&_Sybil.CallOpts, arg0)
}

// ScoreRootMap is a free data retrieval call binding the contract method 0xbd8a4a61.
//
// Solidity: function scoreRootMap(uint32 ) view returns(uint256)
func (_Sybil *SybilCallerSession) ScoreRootMap(arg0 uint32) (*big.Int, error) {
	return _Sybil.Contract.ScoreRootMap(&_Sybil.CallOpts, arg0)
}

// SetForgeL1BatchTimeout is a free data retrieval call binding the contract method 0xc021501b.
//
// Solidity: function setForgeL1BatchTimeout(uint8 newTimeout) pure returns()
func (_Sybil *SybilCaller) SetForgeL1BatchTimeout(opts *bind.CallOpts, newTimeout uint8) error {
	var out []interface{}
	err := _Sybil.contract.Call(opts, &out, "setForgeL1BatchTimeout", newTimeout)

	if err != nil {
		return err
	}

	return err

}

// SetForgeL1BatchTimeout is a free data retrieval call binding the contract method 0xc021501b.
//
// Solidity: function setForgeL1BatchTimeout(uint8 newTimeout) pure returns()
func (_Sybil *SybilSession) SetForgeL1BatchTimeout(newTimeout uint8) error {
	return _Sybil.Contract.SetForgeL1BatchTimeout(&_Sybil.CallOpts, newTimeout)
}

// SetForgeL1BatchTimeout is a free data retrieval call binding the contract method 0xc021501b.
//
// Solidity: function setForgeL1BatchTimeout(uint8 newTimeout) pure returns()
func (_Sybil *SybilCallerSession) SetForgeL1BatchTimeout(newTimeout uint8) error {
	return _Sybil.Contract.SetForgeL1BatchTimeout(&_Sybil.CallOpts, newTimeout)
}

// UnprocessedBatchesMap is a free data retrieval call binding the contract method 0xef8140b5.
//
// Solidity: function unprocessedBatchesMap(uint32 ) view returns(bytes)
func (_Sybil *SybilCaller) UnprocessedBatchesMap(opts *bind.CallOpts, arg0 uint32) ([]byte, error) {
	var out []interface{}
	err := _Sybil.contract.Call(opts, &out, "unprocessedBatchesMap", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// UnprocessedBatchesMap is a free data retrieval call binding the contract method 0xef8140b5.
//
// Solidity: function unprocessedBatchesMap(uint32 ) view returns(bytes)
func (_Sybil *SybilSession) UnprocessedBatchesMap(arg0 uint32) ([]byte, error) {
	return _Sybil.Contract.UnprocessedBatchesMap(&_Sybil.CallOpts, arg0)
}

// UnprocessedBatchesMap is a free data retrieval call binding the contract method 0xef8140b5.
//
// Solidity: function unprocessedBatchesMap(uint32 ) view returns(bytes)
func (_Sybil *SybilCallerSession) UnprocessedBatchesMap(arg0 uint32) ([]byte, error) {
	return _Sybil.Contract.UnprocessedBatchesMap(&_Sybil.CallOpts, arg0)
}

// VouchRootMap is a free data retrieval call binding the contract method 0xadacd33b.
//
// Solidity: function vouchRootMap(uint32 ) view returns(uint256)
func (_Sybil *SybilCaller) VouchRootMap(opts *bind.CallOpts, arg0 uint32) (*big.Int, error) {
	var out []interface{}
	err := _Sybil.contract.Call(opts, &out, "vouchRootMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VouchRootMap is a free data retrieval call binding the contract method 0xadacd33b.
//
// Solidity: function vouchRootMap(uint32 ) view returns(uint256)
func (_Sybil *SybilSession) VouchRootMap(arg0 uint32) (*big.Int, error) {
	return _Sybil.Contract.VouchRootMap(&_Sybil.CallOpts, arg0)
}

// VouchRootMap is a free data retrieval call binding the contract method 0xadacd33b.
//
// Solidity: function vouchRootMap(uint32 ) view returns(uint256)
func (_Sybil *SybilCallerSession) VouchRootMap(arg0 uint32) (*big.Int, error) {
	return _Sybil.Contract.VouchRootMap(&_Sybil.CallOpts, arg0)
}

// AddTx is a paid mutator transaction binding the contract method 0x2f463f59.
//
// Solidity: function _addTx(address ethAddress, uint48 fromIdx, uint40 loadAmountF, uint40 amountF, uint48 toIdx) returns()
func (_Sybil *SybilTransactor) AddTx(opts *bind.TransactOpts, ethAddress common.Address, fromIdx *big.Int, loadAmountF *big.Int, amountF *big.Int, toIdx *big.Int) (*types.Transaction, error) {
	return _Sybil.contract.Transact(opts, "_addTx", ethAddress, fromIdx, loadAmountF, amountF, toIdx)
}

// AddTx is a paid mutator transaction binding the contract method 0x2f463f59.
//
// Solidity: function _addTx(address ethAddress, uint48 fromIdx, uint40 loadAmountF, uint40 amountF, uint48 toIdx) returns()
func (_Sybil *SybilSession) AddTx(ethAddress common.Address, fromIdx *big.Int, loadAmountF *big.Int, amountF *big.Int, toIdx *big.Int) (*types.Transaction, error) {
	return _Sybil.Contract.AddTx(&_Sybil.TransactOpts, ethAddress, fromIdx, loadAmountF, amountF, toIdx)
}

// AddTx is a paid mutator transaction binding the contract method 0x2f463f59.
//
// Solidity: function _addTx(address ethAddress, uint48 fromIdx, uint40 loadAmountF, uint40 amountF, uint48 toIdx) returns()
func (_Sybil *SybilTransactorSession) AddTx(ethAddress common.Address, fromIdx *big.Int, loadAmountF *big.Int, amountF *big.Int, toIdx *big.Int) (*types.Transaction, error) {
	return _Sybil.Contract.AddTx(&_Sybil.TransactOpts, ethAddress, fromIdx, loadAmountF, amountF, toIdx)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x9dca362f.
//
// Solidity: function createAccount() payable returns()
func (_Sybil *SybilTransactor) CreateAccount(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Sybil.contract.Transact(opts, "createAccount")
}

// CreateAccount is a paid mutator transaction binding the contract method 0x9dca362f.
//
// Solidity: function createAccount() payable returns()
func (_Sybil *SybilSession) CreateAccount() (*types.Transaction, error) {
	return _Sybil.Contract.CreateAccount(&_Sybil.TransactOpts)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x9dca362f.
//
// Solidity: function createAccount() payable returns()
func (_Sybil *SybilTransactorSession) CreateAccount() (*types.Transaction, error) {
	return _Sybil.Contract.CreateAccount(&_Sybil.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0x9a18b70a.
//
// Solidity: function deposit(uint48 fromIdx, uint40 loadAmountF, uint40 amountF) payable returns()
func (_Sybil *SybilTransactor) Deposit(opts *bind.TransactOpts, fromIdx *big.Int, loadAmountF *big.Int, amountF *big.Int) (*types.Transaction, error) {
	return _Sybil.contract.Transact(opts, "deposit", fromIdx, loadAmountF, amountF)
}

// Deposit is a paid mutator transaction binding the contract method 0x9a18b70a.
//
// Solidity: function deposit(uint48 fromIdx, uint40 loadAmountF, uint40 amountF) payable returns()
func (_Sybil *SybilSession) Deposit(fromIdx *big.Int, loadAmountF *big.Int, amountF *big.Int) (*types.Transaction, error) {
	return _Sybil.Contract.Deposit(&_Sybil.TransactOpts, fromIdx, loadAmountF, amountF)
}

// Deposit is a paid mutator transaction binding the contract method 0x9a18b70a.
//
// Solidity: function deposit(uint48 fromIdx, uint40 loadAmountF, uint40 amountF) payable returns()
func (_Sybil *SybilTransactorSession) Deposit(fromIdx *big.Int, loadAmountF *big.Int, amountF *big.Int) (*types.Transaction, error) {
	return _Sybil.Contract.Deposit(&_Sybil.TransactOpts, fromIdx, loadAmountF, amountF)
}

// Exit is a paid mutator transaction binding the contract method 0x519c7a31.
//
// Solidity: function exit(uint48 fromIdx, uint40 loadAmountF, uint40 amountF) payable returns()
func (_Sybil *SybilTransactor) Exit(opts *bind.TransactOpts, fromIdx *big.Int, loadAmountF *big.Int, amountF *big.Int) (*types.Transaction, error) {
	return _Sybil.contract.Transact(opts, "exit", fromIdx, loadAmountF, amountF)
}

// Exit is a paid mutator transaction binding the contract method 0x519c7a31.
//
// Solidity: function exit(uint48 fromIdx, uint40 loadAmountF, uint40 amountF) payable returns()
func (_Sybil *SybilSession) Exit(fromIdx *big.Int, loadAmountF *big.Int, amountF *big.Int) (*types.Transaction, error) {
	return _Sybil.Contract.Exit(&_Sybil.TransactOpts, fromIdx, loadAmountF, amountF)
}

// Exit is a paid mutator transaction binding the contract method 0x519c7a31.
//
// Solidity: function exit(uint48 fromIdx, uint40 loadAmountF, uint40 amountF) payable returns()
func (_Sybil *SybilTransactorSession) Exit(fromIdx *big.Int, loadAmountF *big.Int, amountF *big.Int) (*types.Transaction, error) {
	return _Sybil.Contract.Exit(&_Sybil.TransactOpts, fromIdx, loadAmountF, amountF)
}

// Explode is a paid mutator transaction binding the contract method 0x8f31e7e9.
//
// Solidity: function explode(uint48 fromIdx, uint40 loadAmountF, uint40 amountF) payable returns()
func (_Sybil *SybilTransactor) Explode(opts *bind.TransactOpts, fromIdx *big.Int, loadAmountF *big.Int, amountF *big.Int) (*types.Transaction, error) {
	return _Sybil.contract.Transact(opts, "explode", fromIdx, loadAmountF, amountF)
}

// Explode is a paid mutator transaction binding the contract method 0x8f31e7e9.
//
// Solidity: function explode(uint48 fromIdx, uint40 loadAmountF, uint40 amountF) payable returns()
func (_Sybil *SybilSession) Explode(fromIdx *big.Int, loadAmountF *big.Int, amountF *big.Int) (*types.Transaction, error) {
	return _Sybil.Contract.Explode(&_Sybil.TransactOpts, fromIdx, loadAmountF, amountF)
}

// Explode is a paid mutator transaction binding the contract method 0x8f31e7e9.
//
// Solidity: function explode(uint48 fromIdx, uint40 loadAmountF, uint40 amountF) payable returns()
func (_Sybil *SybilTransactorSession) Explode(fromIdx *big.Int, loadAmountF *big.Int, amountF *big.Int) (*types.Transaction, error) {
	return _Sybil.Contract.Explode(&_Sybil.TransactOpts, fromIdx, loadAmountF, amountF)
}

// ForgeBatch is a paid mutator transaction binding the contract method 0x089d8e7a.
//
// Solidity: function forgeBatch(uint48 newLastIdx, uint256 newAccountRoot, uint256 newVouchRoot, uint256 newScoreRoot, uint256 newExitRoot, uint8 verifierIdx, uint256[2] proofA, uint256[2][2] proofB, uint256[2] proofC, uint256 input) returns()
func (_Sybil *SybilTransactor) ForgeBatch(opts *bind.TransactOpts, newLastIdx *big.Int, newAccountRoot *big.Int, newVouchRoot *big.Int, newScoreRoot *big.Int, newExitRoot *big.Int, verifierIdx uint8, proofA [2]*big.Int, proofB [2][2]*big.Int, proofC [2]*big.Int, input *big.Int) (*types.Transaction, error) {
	return _Sybil.contract.Transact(opts, "forgeBatch", newLastIdx, newAccountRoot, newVouchRoot, newScoreRoot, newExitRoot, verifierIdx, proofA, proofB, proofC, input)
}

// ForgeBatch is a paid mutator transaction binding the contract method 0x089d8e7a.
//
// Solidity: function forgeBatch(uint48 newLastIdx, uint256 newAccountRoot, uint256 newVouchRoot, uint256 newScoreRoot, uint256 newExitRoot, uint8 verifierIdx, uint256[2] proofA, uint256[2][2] proofB, uint256[2] proofC, uint256 input) returns()
func (_Sybil *SybilSession) ForgeBatch(newLastIdx *big.Int, newAccountRoot *big.Int, newVouchRoot *big.Int, newScoreRoot *big.Int, newExitRoot *big.Int, verifierIdx uint8, proofA [2]*big.Int, proofB [2][2]*big.Int, proofC [2]*big.Int, input *big.Int) (*types.Transaction, error) {
	return _Sybil.Contract.ForgeBatch(&_Sybil.TransactOpts, newLastIdx, newAccountRoot, newVouchRoot, newScoreRoot, newExitRoot, verifierIdx, proofA, proofB, proofC, input)
}

// ForgeBatch is a paid mutator transaction binding the contract method 0x089d8e7a.
//
// Solidity: function forgeBatch(uint48 newLastIdx, uint256 newAccountRoot, uint256 newVouchRoot, uint256 newScoreRoot, uint256 newExitRoot, uint8 verifierIdx, uint256[2] proofA, uint256[2][2] proofB, uint256[2] proofC, uint256 input) returns()
func (_Sybil *SybilTransactorSession) ForgeBatch(newLastIdx *big.Int, newAccountRoot *big.Int, newVouchRoot *big.Int, newScoreRoot *big.Int, newExitRoot *big.Int, verifierIdx uint8, proofA [2]*big.Int, proofB [2][2]*big.Int, proofC [2]*big.Int, input *big.Int) (*types.Transaction, error) {
	return _Sybil.Contract.ForgeBatch(&_Sybil.TransactOpts, newLastIdx, newAccountRoot, newVouchRoot, newScoreRoot, newExitRoot, verifierIdx, proofA, proofB, proofC, input)
}

// Initialize is a paid mutator transaction binding the contract method 0x0f1c7003.
//
// Solidity: function initialize(address[] verifiers, uint256[] maxTxs, uint256[] nLevels, uint8 _forgeL1BatchTimeout, address _poseidon2Elements, address _poseidon3Elements, address _poseidon4Elements) returns()
func (_Sybil *SybilTransactor) Initialize(opts *bind.TransactOpts, verifiers []common.Address, maxTxs []*big.Int, nLevels []*big.Int, _forgeL1BatchTimeout uint8, _poseidon2Elements common.Address, _poseidon3Elements common.Address, _poseidon4Elements common.Address) (*types.Transaction, error) {
	return _Sybil.contract.Transact(opts, "initialize", verifiers, maxTxs, nLevels, _forgeL1BatchTimeout, _poseidon2Elements, _poseidon3Elements, _poseidon4Elements)
}

// Initialize is a paid mutator transaction binding the contract method 0x0f1c7003.
//
// Solidity: function initialize(address[] verifiers, uint256[] maxTxs, uint256[] nLevels, uint8 _forgeL1BatchTimeout, address _poseidon2Elements, address _poseidon3Elements, address _poseidon4Elements) returns()
func (_Sybil *SybilSession) Initialize(verifiers []common.Address, maxTxs []*big.Int, nLevels []*big.Int, _forgeL1BatchTimeout uint8, _poseidon2Elements common.Address, _poseidon3Elements common.Address, _poseidon4Elements common.Address) (*types.Transaction, error) {
	return _Sybil.Contract.Initialize(&_Sybil.TransactOpts, verifiers, maxTxs, nLevels, _forgeL1BatchTimeout, _poseidon2Elements, _poseidon3Elements, _poseidon4Elements)
}

// Initialize is a paid mutator transaction binding the contract method 0x0f1c7003.
//
// Solidity: function initialize(address[] verifiers, uint256[] maxTxs, uint256[] nLevels, uint8 _forgeL1BatchTimeout, address _poseidon2Elements, address _poseidon3Elements, address _poseidon4Elements) returns()
func (_Sybil *SybilTransactorSession) Initialize(verifiers []common.Address, maxTxs []*big.Int, nLevels []*big.Int, _forgeL1BatchTimeout uint8, _poseidon2Elements common.Address, _poseidon3Elements common.Address, _poseidon4Elements common.Address) (*types.Transaction, error) {
	return _Sybil.Contract.Initialize(&_Sybil.TransactOpts, verifiers, maxTxs, nLevels, _forgeL1BatchTimeout, _poseidon2Elements, _poseidon3Elements, _poseidon4Elements)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Sybil *SybilTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Sybil.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Sybil *SybilSession) RenounceOwnership() (*types.Transaction, error) {
	return _Sybil.Contract.RenounceOwnership(&_Sybil.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Sybil *SybilTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Sybil.Contract.RenounceOwnership(&_Sybil.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Sybil *SybilTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Sybil.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Sybil *SybilSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Sybil.Contract.TransferOwnership(&_Sybil.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Sybil *SybilTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Sybil.Contract.TransferOwnership(&_Sybil.TransactOpts, newOwner)
}

// WithdrawMerkleProof is a paid mutator transaction binding the contract method 0x62332ee2.
//
// Solidity: function withdrawMerkleProof(uint192 amount, uint32 numExitRoot, uint256[] siblings, uint48 idx) returns()
func (_Sybil *SybilTransactor) WithdrawMerkleProof(opts *bind.TransactOpts, amount *big.Int, numExitRoot uint32, siblings []*big.Int, idx *big.Int) (*types.Transaction, error) {
	return _Sybil.contract.Transact(opts, "withdrawMerkleProof", amount, numExitRoot, siblings, idx)
}

// WithdrawMerkleProof is a paid mutator transaction binding the contract method 0x62332ee2.
//
// Solidity: function withdrawMerkleProof(uint192 amount, uint32 numExitRoot, uint256[] siblings, uint48 idx) returns()
func (_Sybil *SybilSession) WithdrawMerkleProof(amount *big.Int, numExitRoot uint32, siblings []*big.Int, idx *big.Int) (*types.Transaction, error) {
	return _Sybil.Contract.WithdrawMerkleProof(&_Sybil.TransactOpts, amount, numExitRoot, siblings, idx)
}

// WithdrawMerkleProof is a paid mutator transaction binding the contract method 0x62332ee2.
//
// Solidity: function withdrawMerkleProof(uint192 amount, uint32 numExitRoot, uint256[] siblings, uint48 idx) returns()
func (_Sybil *SybilTransactorSession) WithdrawMerkleProof(amount *big.Int, numExitRoot uint32, siblings []*big.Int, idx *big.Int) (*types.Transaction, error) {
	return _Sybil.Contract.WithdrawMerkleProof(&_Sybil.TransactOpts, amount, numExitRoot, siblings, idx)
}

// SybilForgeBatchIterator is returned from FilterForgeBatch and is used to iterate over the raw logs and unpacked data for ForgeBatch events raised by the Sybil contract.
type SybilForgeBatchIterator struct {
	Event *SybilForgeBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SybilForgeBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SybilForgeBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SybilForgeBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SybilForgeBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SybilForgeBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SybilForgeBatch represents a ForgeBatch event raised by the Sybil contract.
type SybilForgeBatch struct {
	BatchNum     uint32
	L1UserTxsLen uint16
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterForgeBatch is a free log retrieval operation binding the contract event 0xe00040c8a3b0bf905636c26924e90520eafc5003324138236fddee2d34588618.
//
// Solidity: event ForgeBatch(uint32 indexed batchNum, uint16 l1UserTxsLen)
func (_Sybil *SybilFilterer) FilterForgeBatch(opts *bind.FilterOpts, batchNum []uint32) (*SybilForgeBatchIterator, error) {

	var batchNumRule []interface{}
	for _, batchNumItem := range batchNum {
		batchNumRule = append(batchNumRule, batchNumItem)
	}

	logs, sub, err := _Sybil.contract.FilterLogs(opts, "ForgeBatch", batchNumRule)
	if err != nil {
		return nil, err
	}
	return &SybilForgeBatchIterator{contract: _Sybil.contract, event: "ForgeBatch", logs: logs, sub: sub}, nil
}

// WatchForgeBatch is a free log subscription operation binding the contract event 0xe00040c8a3b0bf905636c26924e90520eafc5003324138236fddee2d34588618.
//
// Solidity: event ForgeBatch(uint32 indexed batchNum, uint16 l1UserTxsLen)
func (_Sybil *SybilFilterer) WatchForgeBatch(opts *bind.WatchOpts, sink chan<- *SybilForgeBatch, batchNum []uint32) (event.Subscription, error) {

	var batchNumRule []interface{}
	for _, batchNumItem := range batchNum {
		batchNumRule = append(batchNumRule, batchNumItem)
	}

	logs, sub, err := _Sybil.contract.WatchLogs(opts, "ForgeBatch", batchNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SybilForgeBatch)
				if err := _Sybil.contract.UnpackLog(event, "ForgeBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseForgeBatch is a log parse operation binding the contract event 0xe00040c8a3b0bf905636c26924e90520eafc5003324138236fddee2d34588618.
//
// Solidity: event ForgeBatch(uint32 indexed batchNum, uint16 l1UserTxsLen)
func (_Sybil *SybilFilterer) ParseForgeBatch(log types.Log) (*SybilForgeBatch, error) {
	event := new(SybilForgeBatch)
	if err := _Sybil.contract.UnpackLog(event, "ForgeBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SybilInitializeIterator is returned from FilterInitialize and is used to iterate over the raw logs and unpacked data for Initialize events raised by the Sybil contract.
type SybilInitializeIterator struct {
	Event *SybilInitialize // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SybilInitializeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SybilInitialize)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SybilInitialize)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SybilInitializeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SybilInitializeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SybilInitialize represents a Initialize event raised by the Sybil contract.
type SybilInitialize struct {
	ForgeL1BatchTimeout uint8
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterInitialize is a free log retrieval operation binding the contract event 0xd2b214d5e2d2f958eb3b30690fa010715ebfdb9438837a496031fd1d0462e593.
//
// Solidity: event Initialize(uint8 forgeL1BatchTimeout)
func (_Sybil *SybilFilterer) FilterInitialize(opts *bind.FilterOpts) (*SybilInitializeIterator, error) {

	logs, sub, err := _Sybil.contract.FilterLogs(opts, "Initialize")
	if err != nil {
		return nil, err
	}
	return &SybilInitializeIterator{contract: _Sybil.contract, event: "Initialize", logs: logs, sub: sub}, nil
}

// WatchInitialize is a free log subscription operation binding the contract event 0xd2b214d5e2d2f958eb3b30690fa010715ebfdb9438837a496031fd1d0462e593.
//
// Solidity: event Initialize(uint8 forgeL1BatchTimeout)
func (_Sybil *SybilFilterer) WatchInitialize(opts *bind.WatchOpts, sink chan<- *SybilInitialize) (event.Subscription, error) {

	logs, sub, err := _Sybil.contract.WatchLogs(opts, "Initialize")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SybilInitialize)
				if err := _Sybil.contract.UnpackLog(event, "Initialize", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialize is a log parse operation binding the contract event 0xd2b214d5e2d2f958eb3b30690fa010715ebfdb9438837a496031fd1d0462e593.
//
// Solidity: event Initialize(uint8 forgeL1BatchTimeout)
func (_Sybil *SybilFilterer) ParseInitialize(log types.Log) (*SybilInitialize, error) {
	event := new(SybilInitialize)
	if err := _Sybil.contract.UnpackLog(event, "Initialize", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SybilInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Sybil contract.
type SybilInitializedIterator struct {
	Event *SybilInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SybilInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SybilInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SybilInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SybilInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SybilInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SybilInitialized represents a Initialized event raised by the Sybil contract.
type SybilInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_Sybil *SybilFilterer) FilterInitialized(opts *bind.FilterOpts) (*SybilInitializedIterator, error) {

	logs, sub, err := _Sybil.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &SybilInitializedIterator{contract: _Sybil.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_Sybil *SybilFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *SybilInitialized) (event.Subscription, error) {

	logs, sub, err := _Sybil.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SybilInitialized)
				if err := _Sybil.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_Sybil *SybilFilterer) ParseInitialized(log types.Log) (*SybilInitialized, error) {
	event := new(SybilInitialized)
	if err := _Sybil.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SybilL1UserTxEventIterator is returned from FilterL1UserTxEvent and is used to iterate over the raw logs and unpacked data for L1UserTxEvent events raised by the Sybil contract.
type SybilL1UserTxEventIterator struct {
	Event *SybilL1UserTxEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SybilL1UserTxEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SybilL1UserTxEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SybilL1UserTxEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SybilL1UserTxEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SybilL1UserTxEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SybilL1UserTxEvent represents a L1UserTxEvent event raised by the Sybil contract.
type SybilL1UserTxEvent struct {
	QueueIndex uint32
	Position   uint8
	L1UserTx   []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterL1UserTxEvent is a free log retrieval operation binding the contract event 0xdd5c7c5ea02d3c5d1621513faa6de53d474ee6f111eda6352a63e3dfe8c40119.
//
// Solidity: event L1UserTxEvent(uint32 indexed queueIndex, uint8 indexed position, bytes l1UserTx)
func (_Sybil *SybilFilterer) FilterL1UserTxEvent(opts *bind.FilterOpts, queueIndex []uint32, position []uint8) (*SybilL1UserTxEventIterator, error) {

	var queueIndexRule []interface{}
	for _, queueIndexItem := range queueIndex {
		queueIndexRule = append(queueIndexRule, queueIndexItem)
	}
	var positionRule []interface{}
	for _, positionItem := range position {
		positionRule = append(positionRule, positionItem)
	}

	logs, sub, err := _Sybil.contract.FilterLogs(opts, "L1UserTxEvent", queueIndexRule, positionRule)
	if err != nil {
		return nil, err
	}
	return &SybilL1UserTxEventIterator{contract: _Sybil.contract, event: "L1UserTxEvent", logs: logs, sub: sub}, nil
}

// WatchL1UserTxEvent is a free log subscription operation binding the contract event 0xdd5c7c5ea02d3c5d1621513faa6de53d474ee6f111eda6352a63e3dfe8c40119.
//
// Solidity: event L1UserTxEvent(uint32 indexed queueIndex, uint8 indexed position, bytes l1UserTx)
func (_Sybil *SybilFilterer) WatchL1UserTxEvent(opts *bind.WatchOpts, sink chan<- *SybilL1UserTxEvent, queueIndex []uint32, position []uint8) (event.Subscription, error) {

	var queueIndexRule []interface{}
	for _, queueIndexItem := range queueIndex {
		queueIndexRule = append(queueIndexRule, queueIndexItem)
	}
	var positionRule []interface{}
	for _, positionItem := range position {
		positionRule = append(positionRule, positionItem)
	}

	logs, sub, err := _Sybil.contract.WatchLogs(opts, "L1UserTxEvent", queueIndexRule, positionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SybilL1UserTxEvent)
				if err := _Sybil.contract.UnpackLog(event, "L1UserTxEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseL1UserTxEvent is a log parse operation binding the contract event 0xdd5c7c5ea02d3c5d1621513faa6de53d474ee6f111eda6352a63e3dfe8c40119.
//
// Solidity: event L1UserTxEvent(uint32 indexed queueIndex, uint8 indexed position, bytes l1UserTx)
func (_Sybil *SybilFilterer) ParseL1UserTxEvent(log types.Log) (*SybilL1UserTxEvent, error) {
	event := new(SybilL1UserTxEvent)
	if err := _Sybil.contract.UnpackLog(event, "L1UserTxEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SybilOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Sybil contract.
type SybilOwnershipTransferredIterator struct {
	Event *SybilOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SybilOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SybilOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SybilOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SybilOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SybilOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SybilOwnershipTransferred represents a OwnershipTransferred event raised by the Sybil contract.
type SybilOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Sybil *SybilFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*SybilOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Sybil.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &SybilOwnershipTransferredIterator{contract: _Sybil.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Sybil *SybilFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *SybilOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Sybil.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SybilOwnershipTransferred)
				if err := _Sybil.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Sybil *SybilFilterer) ParseOwnershipTransferred(log types.Log) (*SybilOwnershipTransferred, error) {
	event := new(SybilOwnershipTransferred)
	if err := _Sybil.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SybilWithdrawEventIterator is returned from FilterWithdrawEvent and is used to iterate over the raw logs and unpacked data for WithdrawEvent events raised by the Sybil contract.
type SybilWithdrawEventIterator struct {
	Event *SybilWithdrawEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SybilWithdrawEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SybilWithdrawEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SybilWithdrawEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SybilWithdrawEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SybilWithdrawEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SybilWithdrawEvent represents a WithdrawEvent event raised by the Sybil contract.
type SybilWithdrawEvent struct {
	Idx         *big.Int
	NumExitRoot uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterWithdrawEvent is a free log retrieval operation binding the contract event 0x102db758451b2f65238246a452d00c0c4c8f59d8c623aff254111079418e57ec.
//
// Solidity: event WithdrawEvent(uint48 indexed idx, uint32 indexed numExitRoot)
func (_Sybil *SybilFilterer) FilterWithdrawEvent(opts *bind.FilterOpts, idx []*big.Int, numExitRoot []uint32) (*SybilWithdrawEventIterator, error) {

	var idxRule []interface{}
	for _, idxItem := range idx {
		idxRule = append(idxRule, idxItem)
	}
	var numExitRootRule []interface{}
	for _, numExitRootItem := range numExitRoot {
		numExitRootRule = append(numExitRootRule, numExitRootItem)
	}

	logs, sub, err := _Sybil.contract.FilterLogs(opts, "WithdrawEvent", idxRule, numExitRootRule)
	if err != nil {
		return nil, err
	}
	return &SybilWithdrawEventIterator{contract: _Sybil.contract, event: "WithdrawEvent", logs: logs, sub: sub}, nil
}

// WatchWithdrawEvent is a free log subscription operation binding the contract event 0x102db758451b2f65238246a452d00c0c4c8f59d8c623aff254111079418e57ec.
//
// Solidity: event WithdrawEvent(uint48 indexed idx, uint32 indexed numExitRoot)
func (_Sybil *SybilFilterer) WatchWithdrawEvent(opts *bind.WatchOpts, sink chan<- *SybilWithdrawEvent, idx []*big.Int, numExitRoot []uint32) (event.Subscription, error) {

	var idxRule []interface{}
	for _, idxItem := range idx {
		idxRule = append(idxRule, idxItem)
	}
	var numExitRootRule []interface{}
	for _, numExitRootItem := range numExitRoot {
		numExitRootRule = append(numExitRootRule, numExitRootItem)
	}

	logs, sub, err := _Sybil.contract.WatchLogs(opts, "WithdrawEvent", idxRule, numExitRootRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SybilWithdrawEvent)
				if err := _Sybil.contract.UnpackLog(event, "WithdrawEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawEvent is a log parse operation binding the contract event 0x102db758451b2f65238246a452d00c0c4c8f59d8c623aff254111079418e57ec.
//
// Solidity: event WithdrawEvent(uint48 indexed idx, uint32 indexed numExitRoot)
func (_Sybil *SybilFilterer) ParseWithdrawEvent(log types.Log) (*SybilWithdrawEvent, error) {
	event := new(SybilWithdrawEvent)
	if err := _Sybil.contract.UnpackLog(event, "WithdrawEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
